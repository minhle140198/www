{"ast":null,"code":"import _slicedToArray from\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{auth}from\"./firebase\";export var AppContext=React.createContext({currentUser:undefined});export var AppProvider=function AppProvider(_ref){var children=_ref.children;var _useState=useState(),_useState2=_slicedToArray(_useState,2),currentUser=_useState2[0],setCurrentUser=_useState2[1];useEffect(function(){auth.onAuthStateChanged(function(auth){setCurrentUser(auth);});},[]);useEffect(function(){console.log(currentUser);},[currentUser]);// if (currentUser) {\n//   // checks  if current user  has admin role, signout user  to regenerate  token\n//   currentUser\n//     .getIdTokenResult()\n//     .then((idTokenResult: any) => {\n//       if (\n//         !idTokenResult.claims.roles ||\n//         !idTokenResult.claims.roles.includes(\"admin\")\n//       ) {\n//  firebase.auth().currentUser.getIdTokenResult(true);\n//       }\n//     })\n//     .catch((error: any) => {\n//       console.log(error);\n//     });\n// }\nreturn React.createElement(AppContext.Provider,{value:{currentUser:currentUser}},children);};","map":{"version":3,"sources":["/Users/monsama/firetable/www/src/AppProvider.tsx"],"names":["React","useEffect","useState","auth","AppContext","createContext","currentUser","undefined","AppProvider","children","setCurrentUser","onAuthStateChanged","console","log"],"mappings":"mJAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,IAAT,KAAqB,YAArB,CAMA,MAAO,IAAMC,CAAAA,UAAU,CAAGJ,KAAK,CAACK,aAAN,CAAyC,CACjEC,WAAW,CAAEC,SADoD,CAAzC,CAAnB,CAQP,MAAO,IAAMC,CAAAA,WAAwC,CAAG,QAA3CA,CAAAA,WAA2C,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,eAClCP,QAAQ,EAD0B,wCACjEI,WADiE,eACpDI,cADoD,eAGxET,SAAS,CAAC,UAAM,CACdE,IAAI,CAACQ,kBAAL,CAAwB,SAAAR,IAAI,CAAI,CAC9BO,cAAc,CAACP,IAAD,CAAd,CACD,CAFD,EAGD,CAJQ,CAIN,EAJM,CAAT,CAMAF,SAAS,CAAC,UAAM,CACdW,OAAO,CAACC,GAAR,CAAYP,WAAZ,EACD,CAFQ,CAEN,CAACA,WAAD,CAFM,CAAT,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MACE,qBAAC,UAAD,CAAY,QAAZ,EACE,KAAK,CAAE,CACLA,WAAW,CAAXA,WADK,CADT,EAKGG,QALH,CADF,CASD,CArCM","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { auth } from \"./firebase\";\n\ninterface AppContextInterface {\n  currentUser: firebase.User | null | undefined;\n}\n\nexport const AppContext = React.createContext<AppContextInterface>({\n  currentUser: undefined,\n});\n\ninterface IAppProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AppProvider: React.FC<IAppProviderProps> = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState();\n\n  useEffect(() => {\n    auth.onAuthStateChanged(auth => {\n      setCurrentUser(auth);\n    });\n  }, []);\n\n  useEffect(() => {\n    console.log(currentUser);\n  }, [currentUser]);\n  // if (currentUser) {\n  //   // checks  if current user  has admin role, signout user  to regenerate  token\n  //   currentUser\n  //     .getIdTokenResult()\n  //     .then((idTokenResult: any) => {\n  //       if (\n  //         !idTokenResult.claims.roles ||\n  //         !idTokenResult.claims.roles.includes(\"admin\")\n  //       ) {\n  //  firebase.auth().currentUser.getIdTokenResult(true);\n  //       }\n  //     })\n  //     .catch((error: any) => {\n  //       console.log(error);\n  //     });\n  // }\n  return (\n    <AppContext.Provider\n      value={{\n        currentUser,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}