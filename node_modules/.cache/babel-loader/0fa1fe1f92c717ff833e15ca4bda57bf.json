{"ast":null,"code":"import _regeneratorRuntime from\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import React from\"react\";import useHotkeys from\"../../hooks/useHotkeys\";import{onSubmit}from\"./grid-fns\";import{FieldType}from\"../Fields\";/**\n * Listens Hot Keys combination keys to trigger keyboard shortcuts\n */var Hotkeys=function Hotkeys(props){var selectedCell=props.selectedCell;useHotkeys(\"cmd+c\",function(){handleCopy();},[selectedCell]);useHotkeys(\"ctrl+c\",function(){handleCopy();},[selectedCell]);useHotkeys(\"cmd+v\",function(){handlePaste();},[selectedCell]);useHotkeys(\"ctrl+v\",function(){handlePaste();},[selectedCell]);useHotkeys(\"ctrl+x\",function(){handleCut();},[selectedCell]);useHotkeys(\"cmd+x\",function(){handleCut();},[selectedCell]);var stringFields=[FieldType.email,FieldType.simpleText,FieldType.PhoneNumber,FieldType.singleSelect,FieldType.longText,FieldType.url];var numberFields=[FieldType.number,FieldType.rating];/**\n   * populate cell from clipboard\n   */var handlePaste=function handlePaste(){var row,column,newValue,numberValue;return _regeneratorRuntime.async(function handlePaste$(_context){while(1){switch(_context.prev=_context.next){case 0:row=selectedCell.row,column=selectedCell.column;_context.next=3;return _regeneratorRuntime.awrap(navigator.clipboard.readText());case 3:newValue=_context.sent;if(stringFields.includes(column.type))onSubmit(column.key,row)(newValue);else if(numberFields.includes(column.type)){numberValue=parseInt(newValue);if(\"\".concat(numberValue)!==\"NaN\"){onSubmit(column.key,row)(numberValue);}}case 5:case\"end\":return _context.stop();}}});};var supportedFields=[].concat(stringFields,numberFields);/**\n   * copy cell content to clipboard works only on supported fields\n   */var handleCopy=function handleCopy(){var row=selectedCell.row,column=selectedCell.column;if(supportedFields.includes(column.type)){navigator.clipboard.writeText(row[column.key]);}};/**\n   * copy cell content to clipboard and clears cell(only on supported fields)\n   */var handleCut=function handleCut(){var row=selectedCell.row,column=selectedCell.column;if(supportedFields.includes(column.type)){navigator.clipboard.writeText(row[column.key]);onSubmit(column.key,row)(null);}};return React.createElement(React.Fragment,null);};export default Hotkeys;","map":{"version":3,"sources":["/Users/monsama/firetable/www/src/components/Table/HotKeys.tsx"],"names":["React","useHotkeys","onSubmit","FieldType","Hotkeys","props","selectedCell","handleCopy","handlePaste","handleCut","stringFields","email","simpleText","PhoneNumber","singleSelect","longText","url","numberFields","number","rating","row","column","navigator","clipboard","readText","newValue","includes","type","key","numberValue","parseInt","supportedFields","writeText"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport useHotkeys from \"../../hooks/useHotkeys\";\nimport { onSubmit } from \"./grid-fns\";\nimport { FieldType } from \"../Fields\";\n/**\n * Listens Hot Keys combination keys to trigger keyboard shortcuts\n */\nconst Hotkeys = (props: any) => {\n  const { selectedCell } = props;\n\n  useHotkeys(\n    \"cmd+c\",\n    () => {\n      handleCopy();\n    },\n    [selectedCell]\n  );\n  useHotkeys(\n    \"ctrl+c\",\n    () => {\n      handleCopy();\n    },\n    [selectedCell]\n  );\n  useHotkeys(\n    \"cmd+v\",\n    () => {\n      handlePaste();\n    },\n    [selectedCell]\n  );\n  useHotkeys(\n    \"ctrl+v\",\n    () => {\n      handlePaste();\n    },\n    [selectedCell]\n  );\n  useHotkeys(\n    \"ctrl+x\",\n    () => {\n      handleCut();\n    },\n    [selectedCell]\n  );\n  useHotkeys(\n    \"cmd+x\",\n    () => {\n      handleCut();\n    },\n    [selectedCell]\n  );\n  const stringFields = [\n    FieldType.email,\n    FieldType.simpleText,\n    FieldType.PhoneNumber,\n    FieldType.singleSelect,\n    FieldType.longText,\n    FieldType.url,\n  ];\n  const numberFields = [FieldType.number, FieldType.rating];\n  /**\n   * populate cell from clipboard\n   */\n  const handlePaste = async () => {\n    const { row, column } = selectedCell;\n    const newValue = await navigator.clipboard.readText();\n    if (stringFields.includes(column.type)) onSubmit(column.key, row)(newValue);\n    else if (numberFields.includes(column.type)) {\n      const numberValue = parseInt(newValue);\n      if (`${numberValue}` !== \"NaN\") {\n        onSubmit(column.key, row)(numberValue);\n      }\n    }\n  };\n  const supportedFields = [...stringFields, ...numberFields];\n  /**\n   * copy cell content to clipboard works only on supported fields\n   */\n  const handleCopy = () => {\n    const { row, column } = selectedCell;\n    if (supportedFields.includes(column.type)) {\n      navigator.clipboard.writeText(row[column.key]);\n    }\n  };\n  /**\n   * copy cell content to clipboard and clears cell(only on supported fields)\n   */\n  const handleCut = () => {\n    const { row, column } = selectedCell;\n    if (supportedFields.includes(column.type)) {\n      navigator.clipboard.writeText(row[column.key]);\n      onSubmit(column.key, row)(null);\n    }\n  };\n  return <></>;\n};\nexport default Hotkeys;\n"]},"metadata":{},"sourceType":"module"}