{"ast":null,"code":"import _defineProperty from\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect}from\"react\";import useDoc,{DocActions}from\"../useDoc\";import _camelCase from\"lodash/camelCase\";import _findIndex from\"lodash/findIndex\";import{arrayMover}from\"../../util/fns\";var useTableConfig=function useTableConfig(tablePath){var _useDoc=useDoc({path:\"\".concat(tablePath,\"/_FIRETABLE_\")}),_useDoc2=_slicedToArray(_useDoc,2),tableConfigState=_useDoc2[0],documentDispatch=_useDoc2[1];useEffect(function(){var doc=tableConfigState.doc,columns=tableConfigState.columns;if(doc&&columns!==doc.columns){documentDispatch({columns:doc.columns,rowHeight:doc.rowHeight});}},[tableConfigState.doc]);/**  used for specifying the table in use\n   *  @param table firestore collection path\n   */var setTable=function setTable(table){documentDispatch({path:\"\".concat(table,\"/_FIRETABLE_\"),columns:[],doc:null,loading:true});};/**  used for creating a new column\n   *  @param name of column.\n   *  @param type of column\n   *  @param data additional column properties\n   */var add=function add(name,type,data){//TODO: validation\n//console.log(\"tableConfigState\", tableConfigState);\nvar columns=tableConfigState.columns;var key=_camelCase(name);documentDispatch({action:DocActions.update,data:{columns:[].concat(_toConsumableArray(columns),[_objectSpread({name:name,key:key,type:type},data)])}});};/**  used for updating the width of column\n   *  @param index of column.\n   *  @param width number of pixels, eg: 120\n   */var resize=function resize(index,width){var columns=tableConfigState.columns;columns[index].width=width;documentDispatch({action:DocActions.update,data:{columns:columns}});};/**  used for updating column properties such as type,name etc.\n   *  @param index of column.\n   *  @param {updatable[]} updatables properties to be updated\n   */var updateColumn=function updateColumn(index,updatables){var columns=tableConfigState.columns;updatables.forEach(function(updatable){columns[index][updatable.field]=updatable.value;});documentDispatch({action:DocActions.update,data:{columns:columns}});};/** remove column by index\n   *  @param index of column.\n   */var remove=function remove(index){var columns=tableConfigState.columns;columns.splice(index,1);documentDispatch({action:DocActions.update,data:{columns:columns}});};/** reorder columns by key\n   * @param draggedColumnKey column being repositioned.\n   * @param droppedColumnKey column being .\n   */var reorder=function reorder(draggedColumnKey,droppedColumnKey){var columns=tableConfigState.columns;var draggedColumnIndex=_findIndex(columns,[\"key\",draggedColumnKey]);var droppedColumnIndex=_findIndex(columns,[\"key\",droppedColumnKey]);var reorderedColumns=_toConsumableArray(columns);arrayMover(reorderedColumns,draggedColumnIndex,droppedColumnIndex);documentDispatch({action:DocActions.update,data:{columns:reorderedColumns}});};/** changing table configuration used for things such as row height\n   * @param key name of parameter eg. rowHeight\n   * @param value new value eg. 65\n   */var updateConfig=function updateConfig(key,value){documentDispatch({action:DocActions.update,data:_defineProperty({},key,value)});};var actions={updateColumn:updateColumn,updateConfig:updateConfig,add:add,resize:resize,setTable:setTable,remove:remove,reorder:reorder};return[tableConfigState,actions];};export default useTableConfig;","map":{"version":3,"sources":["/Users/monsama/firetable/www/src/hooks/useFiretable/useTableConfig.ts"],"names":["useEffect","useDoc","DocActions","_camelCase","_findIndex","arrayMover","useTableConfig","tablePath","path","tableConfigState","documentDispatch","doc","columns","rowHeight","setTable","table","loading","add","name","type","data","key","action","update","resize","index","width","updateColumn","updatables","forEach","updatable","field","value","remove","splice","reorder","draggedColumnKey","droppedColumnKey","draggedColumnIndex","droppedColumnIndex","reorderedColumns","updateConfig","actions"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\nimport useDoc, { DocActions } from \"../useDoc\";\nimport { FieldType } from \"../../components/Fields\";\nimport _camelCase from \"lodash/camelCase\";\nimport _findIndex from \"lodash/findIndex\";\nimport { arrayMover } from \"../../util/fns\";\n\nconst useTableConfig = (tablePath: string) => {\n  const [tableConfigState, documentDispatch] = useDoc({\n    path: `${tablePath}/_FIRETABLE_`,\n  });\n  useEffect(() => {\n    const { doc, columns } = tableConfigState;\n    if (doc && columns !== doc.columns) {\n      documentDispatch({ columns: doc.columns, rowHeight: doc.rowHeight });\n    }\n  }, [tableConfigState.doc]);\n  /**  used for specifying the table in use\n   *  @param table firestore collection path\n   */\n  const setTable = (table: string) => {\n    documentDispatch({\n      path: `${table}/_FIRETABLE_`,\n      columns: [],\n      doc: null,\n      loading: true,\n    });\n  };\n  /**  used for creating a new column\n   *  @param name of column.\n   *  @param type of column\n   *  @param data additional column properties\n   */\n  const add = (name: string, type: FieldType, data?: any) => {\n    //TODO: validation\n\n    //console.log(\"tableConfigState\", tableConfigState);\n    const { columns } = tableConfigState;\n    const key = _camelCase(name);\n    documentDispatch({\n      action: DocActions.update,\n      data: { columns: [...columns, { name, key, type, ...data }] },\n    });\n  };\n\n  /**  used for updating the width of column\n   *  @param index of column.\n   *  @param width number of pixels, eg: 120\n   */\n  const resize = (index: number, width: number) => {\n    const { columns } = tableConfigState;\n    columns[index].width = width;\n    documentDispatch({ action: DocActions.update, data: { columns } });\n  };\n  type updatable = { field: string; value: unknown };\n\n  /**  used for updating column properties such as type,name etc.\n   *  @param index of column.\n   *  @param {updatable[]} updatables properties to be updated\n   */\n  const updateColumn = (index: number, updatables: updatable[]) => {\n    const { columns } = tableConfigState;\n    updatables.forEach((updatable: updatable) => {\n      columns[index][updatable.field] = updatable.value;\n    });\n    documentDispatch({ action: DocActions.update, data: { columns } });\n  };\n  /** remove column by index\n   *  @param index of column.\n   */\n  const remove = (index: number) => {\n    const { columns } = tableConfigState;\n    columns.splice(index, 1);\n    documentDispatch({ action: DocActions.update, data: { columns } });\n  };\n  /** reorder columns by key\n   * @param draggedColumnKey column being repositioned.\n   * @param droppedColumnKey column being .\n   */\n  const reorder = (draggedColumnKey: string, droppedColumnKey: string) => {\n    const { columns } = tableConfigState;\n    const draggedColumnIndex = _findIndex(columns, [\"key\", draggedColumnKey]);\n    const droppedColumnIndex = _findIndex(columns, [\"key\", droppedColumnKey]);\n    const reorderedColumns = [...columns];\n    arrayMover(reorderedColumns, draggedColumnIndex, droppedColumnIndex);\n    documentDispatch({\n      action: DocActions.update,\n      data: { columns: reorderedColumns },\n    });\n  };\n  /** changing table configuration used for things such as row height\n   * @param key name of parameter eg. rowHeight\n   * @param value new value eg. 65\n   */\n  const updateConfig = (key: string, value: unknown) => {\n    documentDispatch({\n      action: DocActions.update,\n      data: { [key]: value },\n    });\n  };\n  const actions = {\n    updateColumn,\n    updateConfig,\n    add,\n    resize,\n    setTable,\n    remove,\n    reorder,\n  };\n  return [tableConfigState, actions];\n};\n\nexport default useTableConfig;\n"]},"metadata":{},"sourceType":"module"}