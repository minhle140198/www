{"ast":null,"code":"var _assertThisInitialized = require(\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _wrapNativeSuper = require(\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar _slicedToArray = require(\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _defineProperty = require(\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\nCSV Parse\n\nPlease look at the [project documentation](https://csv.js.org/parse/) for additional\ninformation.\n*/\nvar _require = require('stream'),\n    Transform = _require.Transform;\n\nvar ResizeableBuffer = require('./ResizeableBuffer');\n\nvar cr = 13;\nvar nl = 10;\nvar space = 32;\nvar tab = 9;\nvar bom_utf8 = Buffer.from([239, 187, 191]);\n\nvar Parser =\n/*#__PURE__*/\nfunction (_Transform) {\n  \"use strict\";\n\n  _inherits(Parser, _Transform);\n\n  function Parser() {\n    var _this;\n\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Parser);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Parser).call(this, _objectSpread({}, {\n      readableObjectMode: true\n    }, {}, opts)));\n    var options = {}; // Merge with user options\n\n    for (var opt in opts) {\n      options[underscore(opt)] = opts[opt];\n    } // Normalize option `bom`\n\n\n    if (options.bom === undefined || options.bom === null || options.bom === false) {\n      options.bom = false;\n    } else if (options.bom !== true) {\n      throw new CsvError('CSV_INVALID_OPTION_BOM', ['Invalid option bom:', 'bom must be true,', \"got \".concat(JSON.stringify(options.bom))]);\n    } // Normalize option `cast`\n\n\n    var fnCastField = null;\n\n    if (options.cast === undefined || options.cast === null || options.cast === false || options.cast === '') {\n      options.cast = undefined;\n    } else if (typeof options.cast === 'function') {\n      fnCastField = options.cast;\n      options.cast = true;\n    } else if (options.cast !== true) {\n      throw new CsvError('CSV_INVALID_OPTION_CAST', ['Invalid option cast:', 'cast must be true or a function,', \"got \".concat(JSON.stringify(options.cast))]);\n    } // Normalize option `cast_date`\n\n\n    if (options.cast_date === undefined || options.cast_date === null || options.cast_date === false || options.cast_date === '') {\n      options.cast_date = false;\n    } else if (options.cast_date === true) {\n      options.cast_date = function (value) {\n        var date = Date.parse(value);\n        return !isNaN(date) ? new Date(date) : value;\n      };\n    } else if (typeof options.cast_date !== 'function') {\n      throw new CsvError('CSV_INVALID_OPTION_CAST_DATE', ['Invalid option cast_date:', 'cast_date must be true or a function,', \"got \".concat(JSON.stringify(options.cast_date))]);\n    } // Normalize option `columns`\n\n\n    var fnFirstLineToHeaders = null;\n\n    if (options.columns === true) {\n      // Fields in the first line are converted as-is to columns\n      fnFirstLineToHeaders = undefined;\n    } else if (typeof options.columns === 'function') {\n      fnFirstLineToHeaders = options.columns;\n      options.columns = true;\n    } else if (Array.isArray(options.columns)) {\n      options.columns = normalizeColumnsArray(options.columns);\n    } else if (options.columns === undefined || options.columns === null || options.columns === false) {\n      options.columns = false;\n    } else {\n      throw new CsvError('CSV_INVALID_OPTION_COLUMNS', ['Invalid option columns:', 'expect an object, a function or true,', \"got \".concat(JSON.stringify(options.columns))]);\n    } // Normalize option `comment`\n\n\n    if (options.comment === undefined || options.comment === null || options.comment === false || options.comment === '') {\n      options.comment = null;\n    } else {\n      if (typeof options.comment === 'string') {\n        options.comment = Buffer.from(options.comment);\n      }\n\n      if (!Buffer.isBuffer(options.comment)) {\n        throw new CsvError('CSV_INVALID_OPTION_COMMENT', ['Invalid option comment:', 'comment must be a buffer or a string,', \"got \".concat(JSON.stringify(options.comment))]);\n      }\n    } // Normalize option `delimiter`\n\n\n    if (options.delimiter === undefined || options.delimiter === null || options.delimiter === false) {\n      options.delimiter = Buffer.from(',');\n    } else if (typeof options.delimiter === 'string' && options.delimiter.length !== 0) {\n      options.delimiter = Buffer.from(options.delimiter);\n    } else if (Buffer.isBuffer(options.delimiter) && options.delimiter.length === 0 || typeof options.delimiter === 'string' && options.delimiter.length === 0 || !Buffer.isBuffer(options.delimiter) && typeof options.delimiter !== 'string') {\n      throw new CsvError('CSV_INVALID_OPTION_DELIMITER', ['Invalid option delimiter:', 'delimiter must be a non empty string or buffer,', \"got \".concat(JSON.stringify(options.delimiter))]);\n    } // Normalize option `escape`\n\n\n    if (options.escape === undefined || options.escape === null) {\n      options.escape = Buffer.from('\"');\n    } else if (typeof options.escape === 'string') {\n      options.escape = Buffer.from(options.escape);\n    }\n\n    if (!Buffer.isBuffer(options.escape)) {\n      throw new Error(\"Invalid Option: escape must be a buffer or a string, got \".concat(JSON.stringify(options.escape)));\n    } else if (options.escape.length !== 1) {\n      throw new Error(\"Invalid Option Length: escape must be one character, got \".concat(options.escape.length));\n    } else {\n      options.escape = options.escape[0];\n    } // Normalize option `from`\n\n\n    if (options.from === undefined || options.from === null) {\n      options.from = 1;\n    } else {\n      if (typeof options.from === 'string' && /\\d+/.test(options.from)) {\n        options.from = parseInt(options.from);\n      }\n\n      if (Number.isInteger(options.from)) {\n        if (options.from < 0) {\n          throw new Error(\"Invalid Option: from must be a positive integer, got \".concat(JSON.stringify(opts.from)));\n        }\n      } else {\n        throw new Error(\"Invalid Option: from must be an integer, got \".concat(JSON.stringify(options.from)));\n      }\n    } // Normalize option `from_line`\n\n\n    if (options.from_line === undefined || options.from_line === null) {\n      options.from_line = 1;\n    } else {\n      if (typeof options.from_line === 'string' && /\\d+/.test(options.from_line)) {\n        options.from_line = parseInt(options.from_line);\n      }\n\n      if (Number.isInteger(options.from_line)) {\n        if (options.from_line <= 0) {\n          throw new Error(\"Invalid Option: from_line must be a positive integer greater than 0, got \".concat(JSON.stringify(opts.from_line)));\n        }\n      } else {\n        throw new Error(\"Invalid Option: from_line must be an integer, got \".concat(JSON.stringify(opts.from_line)));\n      }\n    } // Normalize option `info`\n\n\n    if (options.info === undefined || options.info === null || options.info === false) {\n      options.info = false;\n    } else if (options.info !== true) {\n      throw new Error(\"Invalid Option: info must be true, got \".concat(JSON.stringify(options.info)));\n    } // Normalize option `max_record_size`\n\n\n    if (options.max_record_size === undefined || options.max_record_size === null || options.max_record_size === false) {\n      options.max_record_size = 0;\n    } else if (Number.isInteger(options.max_record_size) && options.max_record_size >= 0) {// Great, nothing to do\n    } else if (typeof options.max_record_size === 'string' && /\\d+/.test(options.max_record_size)) {\n      options.max_record_size = parseInt(options.max_record_size);\n    } else {\n      throw new Error(\"Invalid Option: max_record_size must be a positive integer, got \".concat(JSON.stringify(options.max_record_size)));\n    } // Normalize option `objname`\n\n\n    if (options.objname === undefined || options.objname === null || options.objname === false) {\n      options.objname = undefined;\n    } else if (Buffer.isBuffer(options.objname)) {\n      if (options.objname.length === 0) {\n        throw new Error(\"Invalid Option: objname must be a non empty buffer\");\n      }\n\n      options.objname = options.objname.toString();\n    } else if (typeof options.objname === 'string') {\n      if (options.objname.length === 0) {\n        throw new Error(\"Invalid Option: objname must be a non empty string\");\n      } // Great, nothing to do\n\n    } else {\n      throw new Error(\"Invalid Option: objname must be a string or a buffer, got \".concat(options.objname));\n    } // Normalize option `on_record`\n\n\n    if (options.on_record === undefined || options.on_record === null) {\n      options.on_record = undefined;\n    } else if (typeof options.on_record !== 'function') {\n      throw new CsvError('CSV_INVALID_OPTION_ON_RECORD', ['Invalid option `on_record`:', 'expect a function,', \"got \".concat(JSON.stringify(options.on_record))]);\n    } // Normalize option `quote`\n\n\n    if (options.quote === null || options.quote === false || options.quote === '') {\n      options.quote = null;\n    } else {\n      if (options.quote === undefined || options.quote === true) {\n        options.quote = Buffer.from('\"');\n      } else if (typeof options.quote === 'string') {\n        options.quote = Buffer.from(options.quote);\n      }\n\n      if (!Buffer.isBuffer(options.quote)) {\n        throw new Error(\"Invalid Option: quote must be a buffer or a string, got \".concat(JSON.stringify(options.quote)));\n      } else if (options.quote.length !== 1) {\n        throw new Error(\"Invalid Option Length: quote must be one character, got \".concat(options.quote.length));\n      } else {\n        options.quote = options.quote[0];\n      }\n    } // Normalize option `raw`\n\n\n    if (options.raw === undefined || options.raw === null || options.raw === false) {\n      options.raw = false;\n    } else if (options.raw !== true) {\n      throw new Error(\"Invalid Option: raw must be true, got \".concat(JSON.stringify(options.raw)));\n    } // Normalize option `record_delimiter`\n\n\n    if (!options.record_delimiter) {\n      options.record_delimiter = [];\n    } else if (!Array.isArray(options.record_delimiter)) {\n      options.record_delimiter = [options.record_delimiter];\n    }\n\n    options.record_delimiter = options.record_delimiter.map(function (rd) {\n      if (typeof rd === 'string') {\n        rd = Buffer.from(rd);\n      }\n\n      return rd;\n    }); // Normalize option `relax`\n\n    if (typeof options.relax === 'boolean') {// Great, nothing to do\n    } else if (options.relax === undefined || options.relax === null) {\n      options.relax = false;\n    } else {\n      throw new Error(\"Invalid Option: relax must be a boolean, got \".concat(JSON.stringify(options.relax)));\n    } // Normalize option `relax_column_count`\n\n\n    if (typeof options.relax_column_count === 'boolean') {// Great, nothing to do\n    } else if (options.relax_column_count === undefined || options.relax_column_count === null) {\n      options.relax_column_count = false;\n    } else {\n      throw new Error(\"Invalid Option: relax_column_count must be a boolean, got \".concat(JSON.stringify(options.relax_column_count)));\n    }\n\n    if (typeof options.relax_column_count_less === 'boolean') {// Great, nothing to do\n    } else if (options.relax_column_count_less === undefined || options.relax_column_count_less === null) {\n      options.relax_column_count_less = false;\n    } else {\n      throw new Error(\"Invalid Option: relax_column_count_less must be a boolean, got \".concat(JSON.stringify(options.relax_column_count_less)));\n    }\n\n    if (typeof options.relax_column_count_more === 'boolean') {// Great, nothing to do\n    } else if (options.relax_column_count_more === undefined || options.relax_column_count_more === null) {\n      options.relax_column_count_more = false;\n    } else {\n      throw new Error(\"Invalid Option: relax_column_count_more must be a boolean, got \".concat(JSON.stringify(options.relax_column_count_more)));\n    } // Normalize option `skip_empty_lines`\n\n\n    if (typeof options.skip_empty_lines === 'boolean') {// Great, nothing to do\n    } else if (options.skip_empty_lines === undefined || options.skip_empty_lines === null) {\n      options.skip_empty_lines = false;\n    } else {\n      throw new Error(\"Invalid Option: skip_empty_lines must be a boolean, got \".concat(JSON.stringify(options.skip_empty_lines)));\n    } // Normalize option `skip_lines_with_empty_values`\n\n\n    if (typeof options.skip_lines_with_empty_values === 'boolean') {// Great, nothing to do\n    } else if (options.skip_lines_with_empty_values === undefined || options.skip_lines_with_empty_values === null) {\n      options.skip_lines_with_empty_values = false;\n    } else {\n      throw new Error(\"Invalid Option: skip_lines_with_empty_values must be a boolean, got \".concat(JSON.stringify(options.skip_lines_with_empty_values)));\n    } // Normalize option `skip_lines_with_error`\n\n\n    if (typeof options.skip_lines_with_error === 'boolean') {// Great, nothing to do\n    } else if (options.skip_lines_with_error === undefined || options.skip_lines_with_error === null) {\n      options.skip_lines_with_error = false;\n    } else {\n      throw new Error(\"Invalid Option: skip_lines_with_error must be a boolean, got \".concat(JSON.stringify(options.skip_lines_with_error)));\n    } // Normalize option `rtrim`\n\n\n    if (options.rtrim === undefined || options.rtrim === null || options.rtrim === false) {\n      options.rtrim = false;\n    } else if (options.rtrim !== true) {\n      throw new Error(\"Invalid Option: rtrim must be a boolean, got \".concat(JSON.stringify(options.rtrim)));\n    } // Normalize option `ltrim`\n\n\n    if (options.ltrim === undefined || options.ltrim === null || options.ltrim === false) {\n      options.ltrim = false;\n    } else if (options.ltrim !== true) {\n      throw new Error(\"Invalid Option: ltrim must be a boolean, got \".concat(JSON.stringify(options.ltrim)));\n    } // Normalize option `trim`\n\n\n    if (options.trim === undefined || options.trim === null || options.trim === false) {\n      options.trim = false;\n    } else if (options.trim !== true) {\n      throw new Error(\"Invalid Option: trim must be a boolean, got \".concat(JSON.stringify(options.trim)));\n    } // Normalize options `trim`, `ltrim` and `rtrim`\n\n\n    if (options.trim === true && opts.ltrim !== false) {\n      options.ltrim = true;\n    } else if (options.ltrim !== true) {\n      options.ltrim = false;\n    }\n\n    if (options.trim === true && opts.rtrim !== false) {\n      options.rtrim = true;\n    } else if (options.rtrim !== true) {\n      options.rtrim = false;\n    } // Normalize option `to`\n\n\n    if (options.to === undefined || options.to === null) {\n      options.to = -1;\n    } else {\n      if (typeof options.to === 'string' && /\\d+/.test(options.to)) {\n        options.to = parseInt(options.to);\n      }\n\n      if (Number.isInteger(options.to)) {\n        if (options.to <= 0) {\n          throw new Error(\"Invalid Option: to must be a positive integer greater than 0, got \".concat(JSON.stringify(opts.to)));\n        }\n      } else {\n        throw new Error(\"Invalid Option: to must be an integer, got \".concat(JSON.stringify(opts.to)));\n      }\n    } // Normalize option `to_line`\n\n\n    if (options.to_line === undefined || options.to_line === null) {\n      options.to_line = -1;\n    } else {\n      if (typeof options.to_line === 'string' && /\\d+/.test(options.to_line)) {\n        options.to_line = parseInt(options.to_line);\n      }\n\n      if (Number.isInteger(options.to_line)) {\n        if (options.to_line <= 0) {\n          throw new Error(\"Invalid Option: to_line must be a positive integer greater than 0, got \".concat(JSON.stringify(opts.to_line)));\n        }\n      } else {\n        throw new Error(\"Invalid Option: to_line must be an integer, got \".concat(JSON.stringify(opts.to_line)));\n      }\n    }\n\n    _this.info = {\n      comment_lines: 0,\n      empty_lines: 0,\n      invalid_field_length: 0,\n      lines: 1,\n      records: 0\n    };\n    _this.options = options;\n    _this.state = {\n      bomSkipped: false,\n      castField: fnCastField,\n      commenting: false,\n      enabled: options.from_line === 1,\n      escaping: false,\n      escapeIsQuote: options.escape === options.quote,\n      expectedRecordLength: options.columns === null ? 0 : options.columns.length,\n      field: new ResizeableBuffer(20),\n      firstLineToHeaders: fnFirstLineToHeaders,\n      info: Object.assign({}, _this.info),\n      previousBuf: undefined,\n      quoting: false,\n      stop: false,\n      rawBuffer: new ResizeableBuffer(100),\n      record: [],\n      recordHasError: false,\n      record_length: 0,\n      recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 2 : Math.max.apply(Math, _toConsumableArray(options.record_delimiter.map(function (v) {\n        return v.length;\n      }))),\n      trimChars: [Buffer.from(' ')[0], Buffer.from('\\t')[0]],\n      wasQuoting: false,\n      wasRowDelimiter: false\n    };\n    return _this;\n  } // Implementation of `Transform._transform`\n\n\n  _createClass(Parser, [{\n    key: \"_transform\",\n    value: function _transform(buf, encoding, callback) {\n      if (this.state.stop === true) {\n        return;\n      }\n\n      var err = this.__parse(buf, false);\n\n      if (err !== undefined) {\n        this.state.stop = true;\n      }\n\n      callback(err);\n    } // Implementation of `Transform._flush`\n\n  }, {\n    key: \"_flush\",\n    value: function _flush(callback) {\n      if (this.state.stop === true) {\n        return;\n      }\n\n      var err = this.__parse(undefined, true);\n\n      callback(err);\n    } // Central parser implementation\n\n  }, {\n    key: \"__parse\",\n    value: function __parse(nextBuf, end) {\n      var _this$options = this.options,\n          bom = _this$options.bom,\n          comment = _this$options.comment,\n          escape = _this$options.escape,\n          from_line = _this$options.from_line,\n          info = _this$options.info,\n          ltrim = _this$options.ltrim,\n          max_record_size = _this$options.max_record_size,\n          quote = _this$options.quote,\n          raw = _this$options.raw,\n          relax = _this$options.relax,\n          rtrim = _this$options.rtrim,\n          skip_empty_lines = _this$options.skip_empty_lines,\n          to = _this$options.to,\n          to_line = _this$options.to_line;\n      var record_delimiter = this.options.record_delimiter;\n      var _this$state = this.state,\n          bomSkipped = _this$state.bomSkipped,\n          previousBuf = _this$state.previousBuf,\n          rawBuffer = _this$state.rawBuffer,\n          escapeIsQuote = _this$state.escapeIsQuote;\n      var buf;\n\n      if (previousBuf === undefined) {\n        if (nextBuf === undefined) {\n          // Handle empty string\n          this.push(null);\n          return;\n        } else {\n          buf = nextBuf;\n        }\n      } else if (previousBuf !== undefined && nextBuf === undefined) {\n        buf = previousBuf;\n      } else {\n        buf = Buffer.concat([previousBuf, nextBuf]);\n      } // Handle UTF BOM\n\n\n      if (bomSkipped === false) {\n        if (bom === false) {\n          this.state.bomSkipped = true;\n        } else if (buf.length < 3) {\n          // No enough data\n          if (end === false) {\n            // Wait for more data\n            this.state.previousBuf = buf;\n            return;\n          } // skip BOM detect because data length < 3\n\n        } else {\n          if (bom_utf8.compare(buf, 0, 3) === 0) {\n            // Skip BOM\n            buf = buf.slice(3);\n          }\n\n          this.state.bomSkipped = true;\n        }\n      }\n\n      var bufLen = buf.length;\n      var pos;\n\n      for (pos = 0; pos < bufLen; pos++) {\n        // Ensure we get enough space to look ahead\n        // There should be a way to move this out of the loop\n        if (this.__needMoreData(pos, bufLen, end)) {\n          break;\n        }\n\n        if (this.state.wasRowDelimiter === true) {\n          this.info.lines++;\n\n          if (info === true && this.state.record.length === 0 && this.state.field.length === 0 && this.state.wasQuoting === false) {\n            this.state.info = Object.assign({}, this.info);\n          }\n\n          this.state.wasRowDelimiter = false;\n        }\n\n        if (to_line !== -1 && this.info.lines > to_line) {\n          this.state.stop = true;\n          this.push(null);\n          return;\n        } // Auto discovery of record_delimiter, unix, mac and windows supported\n\n\n        if (this.state.quoting === false && record_delimiter.length === 0) {\n          var record_delimiterCount = this.__autoDiscoverRowDelimiter(buf, pos);\n\n          if (record_delimiterCount) {\n            record_delimiter = this.options.record_delimiter;\n          }\n        }\n\n        var chr = buf[pos];\n\n        if (raw === true) {\n          rawBuffer.append(chr);\n        }\n\n        if ((chr === cr || chr === nl) && this.state.wasRowDelimiter === false) {\n          this.state.wasRowDelimiter = true;\n        } // Previous char was a valid escape char\n        // treat the current char as a regular char\n\n\n        if (this.state.escaping === true) {\n          this.state.escaping = false;\n        } else {\n          // Escape is only active inside quoted fields\n          // We are quoting, the char is an escape chr and there is a chr to escape\n          if (this.state.quoting === true && chr === escape && pos + 1 < bufLen) {\n            if (escapeIsQuote) {\n              if (buf[pos + 1] === quote) {\n                this.state.escaping = true;\n                continue;\n              }\n            } else {\n              this.state.escaping = true;\n              continue;\n            }\n          } // Not currently escaping and chr is a quote\n          // TODO: need to compare bytes instead of single char\n\n\n          if (this.state.commenting === false && chr === quote) {\n            if (this.state.quoting === true) {\n              var nextChr = buf[pos + 1];\n\n              var isNextChrTrimable = rtrim && this.__isCharTrimable(nextChr); // const isNextChrComment = nextChr === comment\n\n\n              var isNextChrComment = comment !== null && this.__compareBytes(comment, buf, pos + 1, nextChr);\n\n              var isNextChrDelimiter = this.__isDelimiter(nextChr, buf, pos + 1);\n\n              var isNextChrRowDelimiter = record_delimiter.length === 0 ? this.__autoDiscoverRowDelimiter(buf, pos + 1) : this.__isRecordDelimiter(nextChr, buf, pos + 1); // Escape a quote\n              // Treat next char as a regular character\n              // TODO: need to compare bytes instead of single char\n\n              if (chr === escape && nextChr === quote) {\n                pos++;\n              } else if (!nextChr || isNextChrDelimiter || isNextChrRowDelimiter || isNextChrComment || isNextChrTrimable) {\n                this.state.quoting = false;\n                this.state.wasQuoting = true;\n                continue;\n              } else if (relax === false) {\n                var err = this.__error(new CsvError('CSV_INVALID_CLOSING_QUOTE', ['Invalid Closing Quote:', \"got \\\"\".concat(String.fromCharCode(nextChr), \"\\\"\"), \"at line \".concat(this.info.lines), 'instead of delimiter, row delimiter, trimable character', '(if activated) or comment'], this.__context()));\n\n                if (err !== undefined) return err;\n              } else {\n                this.state.quoting = false;\n                this.state.wasQuoting = true; // continue\n\n                this.state.field.prepend(quote);\n              }\n            } else {\n              if (this.state.field.length !== 0) {\n                // In relax mode, treat opening quote preceded by chrs as regular\n                if (relax === false) {\n                  var _err = this.__error(new CsvError('INVALID_OPENING_QUOTE', ['Invalid Opening Quote:', \"a quote is found inside a field at line \".concat(this.info.lines)], this.__context(), {\n                    field: this.state.field\n                  }));\n\n                  if (_err !== undefined) return _err;\n                }\n              } else {\n                this.state.quoting = true;\n                continue;\n              }\n            }\n          }\n\n          if (this.state.quoting === false) {\n            var recordDelimiterLength = this.__isRecordDelimiter(chr, buf, pos);\n\n            if (recordDelimiterLength !== 0) {\n              // Do not emit comments which take a full line\n              var skipCommentLine = this.state.commenting && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0;\n\n              if (skipCommentLine) {\n                this.info.comment_lines++; // Skip full comment line\n              } else {\n                // Skip if line is empty and skip_empty_lines activated\n                if (skip_empty_lines === true && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0) {\n                  this.info.empty_lines++;\n                  pos += recordDelimiterLength - 1;\n                  continue;\n                } // Activate records emition if above from_line\n\n\n                if (this.state.enabled === false && this.info.lines + (this.state.wasRowDelimiter === true ? 1 : 0) >= from_line) {\n                  this.state.enabled = true;\n\n                  this.__resetField();\n\n                  this.__resetRow();\n\n                  pos += recordDelimiterLength - 1;\n                  continue;\n                } else {\n                  var errField = this.__onField();\n\n                  if (errField !== undefined) return errField;\n\n                  var errRecord = this.__onRow();\n\n                  if (errRecord !== undefined) return errRecord;\n                }\n\n                if (to !== -1 && this.info.records >= to) {\n                  this.state.stop = true;\n                  this.push(null);\n                  return;\n                }\n              }\n\n              this.state.commenting = false;\n              pos += recordDelimiterLength - 1;\n              continue;\n            }\n\n            if (this.state.commenting) {\n              continue;\n            }\n\n            var commentCount = comment === null ? 0 : this.__compareBytes(comment, buf, pos, chr);\n\n            if (commentCount !== 0) {\n              this.state.commenting = true;\n              continue;\n            }\n\n            var delimiterLength = this.__isDelimiter(chr, buf, pos);\n\n            if (delimiterLength !== 0) {\n              var _errField = this.__onField();\n\n              if (_errField !== undefined) return _errField;\n              pos += delimiterLength - 1;\n              continue;\n            }\n          }\n        }\n\n        if (this.state.commenting === false) {\n          if (max_record_size !== 0 && this.state.record_length + this.state.field.length > max_record_size) {\n            var _err2 = this.__error(new CsvError('CSV_MAX_RECORD_SIZE', ['Max Record Size:', 'record exceed the maximum number of tolerated bytes', \"of \".concat(max_record_size), \"at line \".concat(this.info.lines)], this.__context()));\n\n            if (_err2 !== undefined) return _err2;\n          }\n        }\n\n        var lappend = ltrim === false || this.state.quoting === true || this.state.field.length !== 0 || !this.__isCharTrimable(chr); // rtrim in non quoting is handle in __onField\n\n        var rappend = rtrim === false || this.state.wasQuoting === false;\n\n        if (lappend === true && rappend === true) {\n          this.state.field.append(chr);\n        } else if (rtrim === true && !this.__isCharTrimable(chr)) {\n          var _err3 = this.__error(new CsvError('CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE', ['Invalid Closing Quote:', 'found non trimable byte after quote', \"at line \".concat(this.info.lines)], this.__context()));\n\n          if (_err3 !== undefined) return _err3;\n        }\n      }\n\n      if (end === true) {\n        // Ensure we are not ending in a quoting state\n        if (this.state.quoting === true) {\n          var _err4 = this.__error(new CsvError('CSV_QUOTE_NOT_CLOSED', ['Quote Not Closed:', \"the parsing is finished with an opening quote at line \".concat(this.info.lines)], this.__context()));\n\n          if (_err4 !== undefined) return _err4;\n        } else {\n          // Skip last line if it has no characters\n          if (this.state.wasQuoting === true || this.state.record.length !== 0 || this.state.field.length !== 0) {\n            var _errField2 = this.__onField();\n\n            if (_errField2 !== undefined) return _errField2;\n\n            var _errRecord = this.__onRow();\n\n            if (_errRecord !== undefined) return _errRecord;\n          } else if (this.state.wasRowDelimiter === true) {\n            this.info.empty_lines++;\n          } else if (this.state.commenting === true) {\n            this.info.comment_lines++;\n          }\n        }\n      } else {\n        this.state.previousBuf = buf.slice(pos);\n      }\n\n      if (this.state.wasRowDelimiter === true) {\n        this.info.lines++;\n        this.state.wasRowDelimiter = false;\n      }\n    } // Helper to test if a character is a space or a line delimiter\n\n  }, {\n    key: \"__isCharTrimable\",\n    value: function __isCharTrimable(chr) {\n      return chr === space || chr === tab || chr === cr || chr === nl;\n    }\n  }, {\n    key: \"__onRow\",\n    value: function __onRow() {\n      var _this$options2 = this.options,\n          columns = _this$options2.columns,\n          info = _this$options2.info,\n          from = _this$options2.from,\n          relax_column_count = _this$options2.relax_column_count,\n          relax_column_count_less = _this$options2.relax_column_count_less,\n          relax_column_count_more = _this$options2.relax_column_count_more,\n          raw = _this$options2.raw,\n          skip_lines_with_empty_values = _this$options2.skip_lines_with_empty_values;\n      var _this$state2 = this.state,\n          enabled = _this$state2.enabled,\n          record = _this$state2.record;\n\n      if (enabled === false) {\n        return this.__resetRow();\n      } // Convert the first line into column names\n\n\n      var recordLength = record.length;\n\n      if (columns === true) {\n        if (isRecordEmpty(record)) {\n          this.__resetRow();\n\n          return;\n        }\n\n        return this.__firstLineToColumns(record);\n      }\n\n      if (columns === false && this.info.records === 0) {\n        this.state.expectedRecordLength = recordLength;\n      }\n\n      if (recordLength !== this.state.expectedRecordLength) {\n        if (relax_column_count === true || relax_column_count_less === true && recordLength < this.state.expectedRecordLength || relax_column_count_more === true && recordLength > this.state.expectedRecordLength) {\n          this.info.invalid_field_length++;\n        } else {\n          if (columns === false) {\n            var err = this.__error(new CsvError('CSV_INCONSISTENT_RECORD_LENGTH', ['Invalid Record Length:', \"expect \".concat(this.state.expectedRecordLength, \",\"), \"got \".concat(recordLength, \" on line \").concat(this.info.lines)], this.__context(), {\n              record: record\n            }));\n\n            if (err !== undefined) return err;\n          } else {\n            var _err5 = this.__error( // CSV_INVALID_RECORD_LENGTH_DONT_MATCH_COLUMNS\n            new CsvError('CSV_RECORD_DONT_MATCH_COLUMNS_LENGTH', ['Invalid Record Length:', \"columns length is \".concat(columns.length, \",\"), // rename columns\n            \"got \".concat(recordLength, \" on line \").concat(this.info.lines)], this.__context(), {\n              record: record\n            }));\n\n            if (_err5 !== undefined) return _err5;\n          }\n        }\n      }\n\n      if (skip_lines_with_empty_values === true) {\n        if (isRecordEmpty(record)) {\n          this.__resetRow();\n\n          return;\n        }\n      }\n\n      if (this.state.recordHasError === true) {\n        this.__resetRow();\n\n        this.state.recordHasError = false;\n        return;\n      }\n\n      this.info.records++;\n\n      if (from === 1 || this.info.records >= from) {\n        if (columns !== false) {\n          var obj = {}; // Transform record array to an object\n\n          for (var i in record) {\n            if (columns[i] === undefined || columns[i].disabled) continue;\n            obj[columns[i].name] = record[i];\n          }\n\n          var objname = this.options.objname;\n\n          if (objname === undefined) {\n            if (raw === true || info === true) {\n              this.__push(Object.assign({\n                record: obj\n              }, raw === true ? {\n                raw: this.state.rawBuffer.toString()\n              } : {}, info === true ? {\n                info: this.state.info\n              } : {}));\n            } else {\n              this.__push(obj);\n            }\n          } else {\n            if (raw === true || info === true) {\n              this.__push(Object.assign({\n                record: [obj[objname], obj]\n              }, raw === true ? {\n                raw: this.state.rawBuffer.toString()\n              } : {}, info === true ? {\n                info: this.state.info\n              } : {}));\n            } else {\n              this.__push([obj[objname], obj]);\n            }\n          }\n        } else {\n          if (raw === true || info === true) {\n            this.__push(Object.assign({\n              record: record\n            }, raw === true ? {\n              raw: this.state.rawBuffer.toString()\n            } : {}, info === true ? {\n              info: this.state.info\n            } : {}));\n          } else {\n            this.__push(record);\n          }\n        }\n      }\n\n      this.__resetRow();\n    }\n  }, {\n    key: \"__firstLineToColumns\",\n    value: function __firstLineToColumns(record) {\n      var firstLineToHeaders = this.state.firstLineToHeaders;\n\n      try {\n        var headers = firstLineToHeaders === undefined ? record : firstLineToHeaders.call(null, record);\n\n        if (!Array.isArray(headers)) {\n          return this.__error(new CsvError('CSV_INVALID_COLUMN_MAPPING', ['Invalid Column Mapping:', 'expect an array from column function,', \"got \".concat(JSON.stringify(headers))], this.__context(), {\n            headers: headers\n          }));\n        }\n\n        var normalizedHeaders = normalizeColumnsArray(headers);\n        this.state.expectedRecordLength = normalizedHeaders.length;\n        this.options.columns = normalizedHeaders;\n\n        this.__resetRow();\n\n        return;\n      } catch (err) {\n        return err;\n      }\n    }\n  }, {\n    key: \"__resetRow\",\n    value: function __resetRow() {\n      if (this.options.raw === true) {\n        this.state.rawBuffer.reset();\n      }\n\n      this.state.record = [];\n      this.state.record_length = 0;\n    }\n  }, {\n    key: \"__onField\",\n    value: function __onField() {\n      var _this$options3 = this.options,\n          cast = _this$options3.cast,\n          rtrim = _this$options3.rtrim,\n          max_record_size = _this$options3.max_record_size;\n      var _this$state3 = this.state,\n          enabled = _this$state3.enabled,\n          wasQuoting = _this$state3.wasQuoting; // Short circuit for the from_line options\n\n      if (enabled === false) {\n        /* this.options.columns !== true && */\n        return this.__resetField();\n      }\n\n      var field = this.state.field.toString();\n\n      if (rtrim === true && wasQuoting === false) {\n        field = field.trimRight();\n      }\n\n      if (cast === true) {\n        var _this$__cast = this.__cast(field),\n            _this$__cast2 = _slicedToArray(_this$__cast, 2),\n            err = _this$__cast2[0],\n            f = _this$__cast2[1];\n\n        if (err !== undefined) return err;\n        field = f;\n      }\n\n      this.state.record.push(field); // Increment record length if record size must not exceed a limit\n\n      if (max_record_size !== 0 && typeof field === 'string') {\n        this.state.record_length += field.length;\n      }\n\n      this.__resetField();\n    }\n  }, {\n    key: \"__resetField\",\n    value: function __resetField() {\n      this.state.field.reset();\n      this.state.wasQuoting = false;\n    }\n  }, {\n    key: \"__push\",\n    value: function __push(record) {\n      var on_record = this.options.on_record;\n\n      if (on_record !== undefined) {\n        var context = this.__context();\n\n        record = on_record.call(null, record, context);\n\n        if (record === undefined || record === null) {\n          return;\n        }\n      }\n\n      this.push(record);\n    } // Return a tuple with the error and the casted value\n\n  }, {\n    key: \"__cast\",\n    value: function __cast(field) {\n      var _this$options4 = this.options,\n          columns = _this$options4.columns,\n          relax_column_count = _this$options4.relax_column_count;\n      var isColumns = Array.isArray(columns); // Dont loose time calling cast\n      // because the final record is an object\n      // and this field can't be associated to a key present in columns\n\n      if (isColumns === true && relax_column_count && this.options.columns.length <= this.state.record.length) {\n        return [undefined, undefined];\n      }\n\n      var context = this.__context();\n\n      if (this.state.castField !== null) {\n        try {\n          return [undefined, this.state.castField.call(null, field, context)];\n        } catch (err) {\n          return [err];\n        }\n      }\n\n      if (this.__isFloat(field)) {\n        return [undefined, parseFloat(field)];\n      } else if (this.options.cast_date !== false) {\n        return [undefined, this.options.cast_date.call(null, field, context)];\n      }\n\n      return [undefined, field];\n    } // Keep it in case we implement the `cast_int` option\n    // __isInt(value){\n    //   // return Number.isInteger(parseInt(value))\n    //   // return !isNaN( parseInt( obj ) );\n    //   return /^(\\-|\\+)?[1-9][0-9]*$/.test(value)\n    // }\n\n  }, {\n    key: \"__isFloat\",\n    value: function __isFloat(value) {\n      return value - parseFloat(value) + 1 >= 0; // Borrowed from jquery\n    }\n  }, {\n    key: \"__compareBytes\",\n    value: function __compareBytes(sourceBuf, targetBuf, pos, firtByte) {\n      if (sourceBuf[0] !== firtByte) return 0;\n      var sourceLength = sourceBuf.length;\n\n      for (var i = 1; i < sourceLength; i++) {\n        if (sourceBuf[i] !== targetBuf[pos + i]) return 0;\n      }\n\n      return sourceLength;\n    }\n  }, {\n    key: \"__needMoreData\",\n    value: function __needMoreData(i, bufLen, end) {\n      if (end) {\n        return false;\n      }\n\n      var _this$options5 = this.options,\n          comment = _this$options5.comment,\n          delimiter = _this$options5.delimiter;\n      var _this$state4 = this.state,\n          quoting = _this$state4.quoting,\n          recordDelimiterMaxLength = _this$state4.recordDelimiterMaxLength;\n      var numOfCharLeft = bufLen - i - 1;\n      var requiredLength = Math.max( // Skip if the remaining buffer smaller than comment\n      comment ? comment.length : 0, // Skip if the remaining buffer smaller than row delimiter\n      recordDelimiterMaxLength, // Skip if the remaining buffer can be row delimiter following the closing quote\n      // 1 is for quote.length\n      quoting ? 1 + recordDelimiterMaxLength : 0, // Skip if the remaining buffer can be delimiter\n      delimiter.length, // Skip if the remaining buffer can be escape sequence\n      // 1 is for escape.length\n      1);\n      return numOfCharLeft < requiredLength;\n    }\n  }, {\n    key: \"__isDelimiter\",\n    value: function __isDelimiter(chr, buf, pos) {\n      var delimiter = this.options.delimiter;\n      var delLength = delimiter.length;\n      if (delimiter[0] !== chr) return 0;\n\n      for (var i = 1; i < delLength; i++) {\n        if (delimiter[i] !== buf[pos + i]) return 0;\n      }\n\n      return delimiter.length;\n    }\n  }, {\n    key: \"__isRecordDelimiter\",\n    value: function __isRecordDelimiter(chr, buf, pos) {\n      var record_delimiter = this.options.record_delimiter;\n      var recordDelimiterLength = record_delimiter.length;\n\n      loop1: for (var i = 0; i < recordDelimiterLength; i++) {\n        var rd = record_delimiter[i];\n        var rdLength = rd.length;\n\n        if (rd[0] !== chr) {\n          continue;\n        }\n\n        for (var j = 1; j < rdLength; j++) {\n          if (rd[j] !== buf[pos + j]) {\n            continue loop1;\n          }\n        }\n\n        return rd.length;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"__autoDiscoverRowDelimiter\",\n    value: function __autoDiscoverRowDelimiter(buf, pos) {\n      var chr = buf[pos];\n\n      if (chr === cr) {\n        if (buf[pos + 1] === nl) {\n          this.options.record_delimiter.push(Buffer.from('\\r\\n'));\n          this.state.recordDelimiterMaxLength = 2;\n          return 2;\n        } else {\n          this.options.record_delimiter.push(Buffer.from('\\r'));\n          this.state.recordDelimiterMaxLength = 1;\n          return 1;\n        }\n      } else if (chr === nl) {\n        this.options.record_delimiter.push(Buffer.from('\\n'));\n        this.state.recordDelimiterMaxLength = 1;\n        return 1;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"__error\",\n    value: function __error(msg) {\n      var skip_lines_with_error = this.options.skip_lines_with_error;\n      var err = typeof msg === 'string' ? new Error(msg) : msg;\n\n      if (skip_lines_with_error) {\n        this.state.recordHasError = true;\n        this.emit('skip', err);\n        return undefined;\n      } else {\n        return err;\n      }\n    }\n  }, {\n    key: \"__context\",\n    value: function __context() {\n      var columns = this.options.columns;\n      var isColumns = Array.isArray(columns);\n      return {\n        column: isColumns === true ? columns.length > this.state.record.length ? columns[this.state.record.length].name : null : this.state.record.length,\n        empty_lines: this.info.empty_lines,\n        header: columns === true,\n        index: this.state.record.length,\n        invalid_field_length: this.info.invalid_field_length,\n        quoting: this.state.wasQuoting,\n        lines: this.info.lines,\n        records: this.info.records\n      };\n    }\n  }]);\n\n  return Parser;\n}(Transform);\n\nvar parse = function parse() {\n  var data, options, callback;\n\n  for (var i in arguments) {\n    var argument = arguments[i];\n    var type = typeof argument;\n\n    if (data === undefined && (typeof argument === 'string' || Buffer.isBuffer(argument))) {\n      data = argument;\n    } else if (options === undefined && isObject(argument)) {\n      options = argument;\n    } else if (callback === undefined && type === 'function') {\n      callback = argument;\n    } else {\n      throw new CsvError('CSV_INVALID_ARGUMENT', ['Invalid argument:', \"got \".concat(JSON.stringify(argument), \" at index \").concat(i)]);\n    }\n  }\n\n  var parser = new Parser(options);\n\n  if (callback) {\n    var records = options === undefined || options.objname === undefined ? [] : {};\n    parser.on('readable', function () {\n      var record;\n\n      while ((record = this.read()) !== null) {\n        if (options === undefined || options.objname === undefined) {\n          records.push(record);\n        } else {\n          records[record[0]] = record[1];\n        }\n      }\n    });\n    parser.on('error', function (err) {\n      callback(err, undefined, parser.info);\n    });\n    parser.on('end', function () {\n      callback(undefined, records, parser.info);\n    });\n  }\n\n  if (data !== undefined) {\n    parser.write(data);\n    parser.end();\n  }\n\n  return parser;\n};\n\nvar CsvError =\n/*#__PURE__*/\nfunction (_Error) {\n  \"use strict\";\n\n  _inherits(CsvError, _Error);\n\n  function CsvError(code, message) {\n    var _this2;\n\n    _classCallCheck(this, CsvError);\n\n    if (Array.isArray(message)) message = message.join(' ');\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(CsvError).call(this, message));\n\n    if (Error.captureStackTrace !== undefined) {\n      Error.captureStackTrace(_assertThisInitialized(_this2), CsvError);\n    }\n\n    _this2.code = code;\n\n    for (var _len = arguments.length, contexts = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      contexts[_key - 2] = arguments[_key];\n    }\n\n    for (var _i = 0, _contexts = contexts; _i < _contexts.length; _i++) {\n      var context = _contexts[_i];\n\n      for (var key in context) {\n        var value = context[key];\n        _this2[key] = Buffer.isBuffer(value) ? value.toString() : value == null ? value : JSON.parse(JSON.stringify(value));\n      }\n    }\n\n    return _this2;\n  }\n\n  return CsvError;\n}(_wrapNativeSuper(Error));\n\nparse.Parser = Parser;\nparse.CsvError = CsvError;\nmodule.exports = parse;\n\nvar underscore = function underscore(str) {\n  return str.replace(/([A-Z])/g, function (_, match) {\n    return '_' + match.toLowerCase();\n  });\n};\n\nvar isObject = function isObject(obj) {\n  return typeof obj === 'object' && obj !== null && !Array.isArray(obj);\n};\n\nvar isRecordEmpty = function isRecordEmpty(record) {\n  return record.every(function (field) {\n    return field == null || field.toString && field.toString().trim() === '';\n  });\n};\n\nvar normalizeColumnsArray = function normalizeColumnsArray(columns) {\n  var normalizedColumns = [];\n\n  for (var i = 0; i < columns.length; i++) {\n    var column = columns[i];\n\n    if (column === undefined || column === null || column === false) {\n      normalizedColumns[i] = {\n        disabled: true\n      };\n    } else if (typeof column === 'string') {\n      normalizedColumns[i] = {\n        name: column\n      };\n    } else if (isObject(column)) {\n      if (typeof column.name !== 'string') {\n        throw new CsvError('CSV_OPTION_COLUMNS_MISSING_NAME', ['Option columns missing name:', \"property \\\"name\\\" is required at position \".concat(i), 'when column is an object literal']);\n      }\n\n      normalizedColumns[i] = column;\n    } else {\n      throw new CsvError('CSV_INVALID_COLUMN_DEFINITION', ['Invalid column definition:', 'expect a string or a literal object,', \"got \".concat(JSON.stringify(column), \" at position \").concat(i)]);\n    }\n  }\n\n  return normalizedColumns;\n};","map":{"version":3,"sources":["/Users/monsama/firetable/www/node_modules/csv-parse/lib/index.js"],"names":["require","Transform","ResizeableBuffer","cr","nl","space","tab","bom_utf8","Buffer","from","Parser","opts","readableObjectMode","options","opt","underscore","bom","undefined","CsvError","JSON","stringify","fnCastField","cast","cast_date","value","date","Date","parse","isNaN","fnFirstLineToHeaders","columns","Array","isArray","normalizeColumnsArray","comment","isBuffer","delimiter","length","escape","Error","test","parseInt","Number","isInteger","from_line","info","max_record_size","objname","toString","on_record","quote","raw","record_delimiter","map","rd","relax","relax_column_count","relax_column_count_less","relax_column_count_more","skip_empty_lines","skip_lines_with_empty_values","skip_lines_with_error","rtrim","ltrim","trim","to","to_line","comment_lines","empty_lines","invalid_field_length","lines","records","state","bomSkipped","castField","commenting","enabled","escaping","escapeIsQuote","expectedRecordLength","field","firstLineToHeaders","Object","assign","previousBuf","quoting","stop","rawBuffer","record","recordHasError","record_length","recordDelimiterMaxLength","Math","max","v","trimChars","wasQuoting","wasRowDelimiter","buf","encoding","callback","err","__parse","nextBuf","end","push","concat","compare","slice","bufLen","pos","__needMoreData","record_delimiterCount","__autoDiscoverRowDelimiter","chr","append","nextChr","isNextChrTrimable","__isCharTrimable","isNextChrComment","__compareBytes","isNextChrDelimiter","__isDelimiter","isNextChrRowDelimiter","__isRecordDelimiter","__error","String","fromCharCode","__context","prepend","recordDelimiterLength","skipCommentLine","__resetField","__resetRow","errField","__onField","errRecord","__onRow","commentCount","delimiterLength","lappend","rappend","recordLength","isRecordEmpty","__firstLineToColumns","obj","i","disabled","name","__push","headers","call","normalizedHeaders","reset","trimRight","__cast","f","context","isColumns","__isFloat","parseFloat","sourceBuf","targetBuf","firtByte","sourceLength","numOfCharLeft","requiredLength","delLength","loop1","rdLength","j","msg","emit","column","header","index","data","arguments","argument","type","isObject","parser","on","read","write","code","message","join","captureStackTrace","contexts","key","module","exports","str","replace","_","match","toLowerCase","every","normalizedColumns"],"mappings":"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","sourcesContent":["\n/*\nCSV Parse\n\nPlease look at the [project documentation](https://csv.js.org/parse/) for additional\ninformation.\n*/\n\nconst { Transform } = require('stream')\nconst ResizeableBuffer = require('./ResizeableBuffer')\n\nconst cr = 13\nconst nl = 10\nconst space = 32\nconst tab = 9\nconst bom_utf8 = Buffer.from([239, 187, 191])\n\nclass Parser extends Transform {\n  constructor(opts = {}){\n    super({...{readableObjectMode: true}, ...opts})\n    const options = {}\n    // Merge with user options\n    for(let opt in opts){\n      options[underscore(opt)] = opts[opt]\n    }\n    // Normalize option `bom`\n    if(options.bom === undefined || options.bom === null || options.bom === false){\n      options.bom = false\n    }else if(options.bom !== true){\n      throw new CsvError('CSV_INVALID_OPTION_BOM', [\n        'Invalid option bom:', 'bom must be true,',\n        `got ${JSON.stringify(options.bom)}`\n      ])\n    }\n    // Normalize option `cast`\n    let fnCastField = null\n    if(options.cast === undefined || options.cast === null || options.cast === false || options.cast === ''){\n      options.cast = undefined\n    }else if(typeof options.cast === 'function'){\n      fnCastField = options.cast\n      options.cast = true\n    }else if(options.cast !== true){\n      throw new CsvError('CSV_INVALID_OPTION_CAST', [\n        'Invalid option cast:', 'cast must be true or a function,',\n        `got ${JSON.stringify(options.cast)}`\n      ])\n    }\n    // Normalize option `cast_date`\n    if(options.cast_date === undefined || options.cast_date === null || options.cast_date === false || options.cast_date === ''){\n      options.cast_date = false\n    }else if(options.cast_date === true){\n      options.cast_date = function(value){\n        const date = Date.parse(value)\n        return !isNaN(date) ? new Date(date) : value\n      }\n    }else if(typeof options.cast_date !== 'function'){\n      throw new CsvError('CSV_INVALID_OPTION_CAST_DATE', [\n        'Invalid option cast_date:', 'cast_date must be true or a function,',\n        `got ${JSON.stringify(options.cast_date)}`\n      ])\n    }\n    // Normalize option `columns`\n    let fnFirstLineToHeaders = null\n    if(options.columns === true){\n      // Fields in the first line are converted as-is to columns\n      fnFirstLineToHeaders = undefined\n    }else if(typeof options.columns === 'function'){\n      fnFirstLineToHeaders = options.columns\n      options.columns = true\n    }else if(Array.isArray(options.columns)){\n      options.columns = normalizeColumnsArray(options.columns)\n    }else if(options.columns === undefined || options.columns === null || options.columns === false){\n      options.columns = false\n    }else{\n      throw new CsvError('CSV_INVALID_OPTION_COLUMNS', [\n        'Invalid option columns:',\n        'expect an object, a function or true,',\n        `got ${JSON.stringify(options.columns)}`\n      ])\n    }\n    // Normalize option `comment`\n    if(options.comment === undefined || options.comment === null || options.comment === false || options.comment === ''){\n      options.comment = null\n    }else{\n      if(typeof options.comment === 'string'){\n        options.comment = Buffer.from(options.comment)\n      }\n      if(!Buffer.isBuffer(options.comment)){\n        throw new CsvError('CSV_INVALID_OPTION_COMMENT', [\n          'Invalid option comment:',\n          'comment must be a buffer or a string,',\n          `got ${JSON.stringify(options.comment)}`\n        ])\n      }\n    }\n    // Normalize option `delimiter`\n    if(options.delimiter === undefined || options.delimiter === null || options.delimiter === false){\n      options.delimiter = Buffer.from(',')\n    }else if(typeof options.delimiter === 'string' && options.delimiter.length !== 0){\n      options.delimiter = Buffer.from(options.delimiter)\n    }else if(\n      (Buffer.isBuffer(options.delimiter) && options.delimiter.length === 0) ||\n      (typeof options.delimiter === 'string' && options.delimiter.length === 0) ||\n      (!Buffer.isBuffer(options.delimiter) && typeof options.delimiter !== 'string')\n    ){\n      throw new CsvError('CSV_INVALID_OPTION_DELIMITER', [\n        'Invalid option delimiter:',\n        'delimiter must be a non empty string or buffer,',\n        `got ${JSON.stringify(options.delimiter)}`\n      ])\n    }\n    // Normalize option `escape`\n    if(options.escape === undefined || options.escape === null){\n      options.escape = Buffer.from('\"')\n    }else if(typeof options.escape === 'string'){\n      options.escape = Buffer.from(options.escape)\n    }\n    if(!Buffer.isBuffer(options.escape)){\n      throw new Error(`Invalid Option: escape must be a buffer or a string, got ${JSON.stringify(options.escape)}`)\n    }else if(options.escape.length !== 1){\n      throw new Error(`Invalid Option Length: escape must be one character, got ${options.escape.length}`)\n    }else{\n      options.escape = options.escape[0]\n    }\n    // Normalize option `from`\n    if(options.from === undefined || options.from === null){\n      options.from = 1\n    }else{\n      if(typeof options.from === 'string' && /\\d+/.test(options.from)){\n        options.from = parseInt(options.from)\n      }\n      if(Number.isInteger(options.from)){\n        if(options.from < 0){\n          throw new Error(`Invalid Option: from must be a positive integer, got ${JSON.stringify(opts.from)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: from must be an integer, got ${JSON.stringify(options.from)}`)\n      }\n    }\n    // Normalize option `from_line`\n    if(options.from_line === undefined || options.from_line === null){\n      options.from_line = 1\n    }else{\n      if(typeof options.from_line === 'string' && /\\d+/.test(options.from_line)){\n        options.from_line = parseInt(options.from_line)\n      }\n      if(Number.isInteger(options.from_line)){\n        if(options.from_line <= 0){\n          throw new Error(`Invalid Option: from_line must be a positive integer greater than 0, got ${JSON.stringify(opts.from_line)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: from_line must be an integer, got ${JSON.stringify(opts.from_line)}`)\n      }\n    }\n    // Normalize option `info`\n    if(options.info === undefined || options.info === null || options.info === false){\n      options.info = false\n    }else if(options.info !== true){\n      throw new Error(`Invalid Option: info must be true, got ${JSON.stringify(options.info)}`)\n    }\n    // Normalize option `max_record_size`\n    if(options.max_record_size === undefined || options.max_record_size === null || options.max_record_size === false){\n      options.max_record_size = 0\n    }else if(Number.isInteger(options.max_record_size) && options.max_record_size >= 0){\n      // Great, nothing to do\n    }else if(typeof options.max_record_size === 'string' && /\\d+/.test(options.max_record_size)){\n      options.max_record_size = parseInt(options.max_record_size)\n    }else{\n      throw new Error(`Invalid Option: max_record_size must be a positive integer, got ${JSON.stringify(options.max_record_size)}`)\n    }\n    // Normalize option `objname`\n    if(options.objname === undefined || options.objname === null || options.objname === false){\n      options.objname = undefined\n    }else if(Buffer.isBuffer(options.objname)){\n      if(options.objname.length === 0){\n        throw new Error(`Invalid Option: objname must be a non empty buffer`)\n      }\n      options.objname = options.objname.toString()\n    }else if(typeof options.objname === 'string'){\n      if(options.objname.length === 0){\n        throw new Error(`Invalid Option: objname must be a non empty string`)\n      }\n      // Great, nothing to do\n    }else{\n      throw new Error(`Invalid Option: objname must be a string or a buffer, got ${options.objname}`)\n    }\n    // Normalize option `on_record`\n    if(options.on_record === undefined || options.on_record === null){\n      options.on_record = undefined\n    }else if(typeof options.on_record !== 'function'){\n      throw new CsvError('CSV_INVALID_OPTION_ON_RECORD', [\n        'Invalid option `on_record`:',\n        'expect a function,',\n        `got ${JSON.stringify(options.on_record)}`\n      ])\n    }\n    // Normalize option `quote`\n    if(options.quote === null || options.quote === false || options.quote === ''){\n      options.quote = null\n    }else{\n      if(options.quote === undefined || options.quote === true){\n        options.quote = Buffer.from('\"')\n      }else if(typeof options.quote === 'string'){\n        options.quote = Buffer.from(options.quote)\n      }\n      if(!Buffer.isBuffer(options.quote)){\n        throw new Error(`Invalid Option: quote must be a buffer or a string, got ${JSON.stringify(options.quote)}`)\n      }else if(options.quote.length !== 1){\n        throw new Error(`Invalid Option Length: quote must be one character, got ${options.quote.length}`)\n      }else{\n        options.quote = options.quote[0]\n      }\n    }\n    // Normalize option `raw`\n    if(options.raw === undefined || options.raw === null || options.raw === false){\n      options.raw = false\n    }else if(options.raw !== true){\n      throw new Error(`Invalid Option: raw must be true, got ${JSON.stringify(options.raw)}`)\n    }\n    // Normalize option `record_delimiter`\n    if(!options.record_delimiter){\n      options.record_delimiter = []\n    }else if(!Array.isArray(options.record_delimiter)){\n      options.record_delimiter = [options.record_delimiter]\n    }\n    options.record_delimiter = options.record_delimiter.map( function(rd){\n      if(typeof rd === 'string'){\n        rd = Buffer.from(rd)\n      }\n      return rd\n    })\n    // Normalize option `relax`\n    if(typeof options.relax === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax === undefined || options.relax === null){\n      options.relax = false\n    }else{\n      throw new Error(`Invalid Option: relax must be a boolean, got ${JSON.stringify(options.relax)}`)\n    }\n    // Normalize option `relax_column_count`\n    if(typeof options.relax_column_count === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax_column_count === undefined || options.relax_column_count === null){\n      options.relax_column_count = false\n    }else{\n      throw new Error(`Invalid Option: relax_column_count must be a boolean, got ${JSON.stringify(options.relax_column_count)}`)\n    }\n    if(typeof options.relax_column_count_less === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax_column_count_less === undefined || options.relax_column_count_less === null){\n      options.relax_column_count_less = false\n    }else{\n      throw new Error(`Invalid Option: relax_column_count_less must be a boolean, got ${JSON.stringify(options.relax_column_count_less)}`)\n    }\n    if(typeof options.relax_column_count_more === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax_column_count_more === undefined || options.relax_column_count_more === null){\n      options.relax_column_count_more = false\n    }else{\n      throw new Error(`Invalid Option: relax_column_count_more must be a boolean, got ${JSON.stringify(options.relax_column_count_more)}`)\n    }\n    // Normalize option `skip_empty_lines`\n    if(typeof options.skip_empty_lines === 'boolean'){\n      // Great, nothing to do\n    }else if(options.skip_empty_lines === undefined || options.skip_empty_lines === null){\n      options.skip_empty_lines = false\n    }else{\n      throw new Error(`Invalid Option: skip_empty_lines must be a boolean, got ${JSON.stringify(options.skip_empty_lines)}`)\n    }\n    // Normalize option `skip_lines_with_empty_values`\n    if(typeof options.skip_lines_with_empty_values === 'boolean'){\n      // Great, nothing to do\n    }else if(options.skip_lines_with_empty_values === undefined || options.skip_lines_with_empty_values === null){\n      options.skip_lines_with_empty_values = false\n    }else{\n      throw new Error(`Invalid Option: skip_lines_with_empty_values must be a boolean, got ${JSON.stringify(options.skip_lines_with_empty_values)}`)\n    }\n    // Normalize option `skip_lines_with_error`\n    if(typeof options.skip_lines_with_error === 'boolean'){\n      // Great, nothing to do\n    }else if(options.skip_lines_with_error === undefined || options.skip_lines_with_error === null){\n      options.skip_lines_with_error = false\n    }else{\n      throw new Error(`Invalid Option: skip_lines_with_error must be a boolean, got ${JSON.stringify(options.skip_lines_with_error)}`)\n    }\n    // Normalize option `rtrim`\n    if(options.rtrim === undefined || options.rtrim === null || options.rtrim === false){\n      options.rtrim = false\n    }else if(options.rtrim !== true){\n      throw new Error(`Invalid Option: rtrim must be a boolean, got ${JSON.stringify(options.rtrim)}`)\n    }\n    // Normalize option `ltrim`\n    if(options.ltrim === undefined || options.ltrim === null || options.ltrim === false){\n      options.ltrim = false\n    }else if(options.ltrim !== true){\n      throw new Error(`Invalid Option: ltrim must be a boolean, got ${JSON.stringify(options.ltrim)}`)\n    }\n    // Normalize option `trim`\n    if(options.trim === undefined || options.trim === null || options.trim === false){\n      options.trim = false\n    }else if(options.trim !== true){\n      throw new Error(`Invalid Option: trim must be a boolean, got ${JSON.stringify(options.trim)}`)\n    }\n    // Normalize options `trim`, `ltrim` and `rtrim`\n    if(options.trim === true && opts.ltrim !== false){\n      options.ltrim = true\n    }else if(options.ltrim !== true){\n      options.ltrim = false\n    }\n    if(options.trim === true && opts.rtrim !== false){\n      options.rtrim = true\n    }else if(options.rtrim !== true){\n      options.rtrim = false\n    }\n    // Normalize option `to`\n    if(options.to === undefined || options.to === null){\n      options.to = -1\n    }else{\n      if(typeof options.to === 'string' && /\\d+/.test(options.to)){\n        options.to = parseInt(options.to)\n      }\n      if(Number.isInteger(options.to)){\n        if(options.to <= 0){\n          throw new Error(`Invalid Option: to must be a positive integer greater than 0, got ${JSON.stringify(opts.to)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: to must be an integer, got ${JSON.stringify(opts.to)}`)\n      }\n    }\n    // Normalize option `to_line`\n    if(options.to_line === undefined || options.to_line === null){\n      options.to_line = -1\n    }else{\n      if(typeof options.to_line === 'string' && /\\d+/.test(options.to_line)){\n        options.to_line = parseInt(options.to_line)\n      }\n      if(Number.isInteger(options.to_line)){\n        if(options.to_line <= 0){\n          throw new Error(`Invalid Option: to_line must be a positive integer greater than 0, got ${JSON.stringify(opts.to_line)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: to_line must be an integer, got ${JSON.stringify(opts.to_line)}`)\n      }\n    }\n    this.info = {\n      comment_lines: 0,\n      empty_lines: 0,\n      invalid_field_length: 0,\n      lines: 1,\n      records: 0\n    }\n    this.options = options\n    this.state = {\n      bomSkipped: false,\n      castField: fnCastField,\n      commenting: false,\n      enabled: options.from_line === 1,\n      escaping: false,\n      escapeIsQuote: options.escape === options.quote,\n      expectedRecordLength: options.columns === null ? 0 : options.columns.length,\n      field: new ResizeableBuffer(20),\n      firstLineToHeaders: fnFirstLineToHeaders,\n      info: Object.assign({}, this.info),\n      previousBuf: undefined,\n      quoting: false,\n      stop: false,\n      rawBuffer: new ResizeableBuffer(100),\n      record: [],\n      recordHasError: false,\n      record_length: 0,\n      recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 2 : Math.max(...options.record_delimiter.map( (v) => v.length)),\n      trimChars: [Buffer.from(' ')[0], Buffer.from('\\t')[0]],\n      wasQuoting: false,\n      wasRowDelimiter: false\n    }\n  }\n  // Implementation of `Transform._transform`\n  _transform(buf, encoding, callback){\n    if(this.state.stop === true){\n      return\n    }\n    const err = this.__parse(buf, false)\n    if(err !== undefined){\n      this.state.stop = true\n    }\n    callback(err)\n  }\n  // Implementation of `Transform._flush`\n  _flush(callback){\n    if(this.state.stop === true){\n      return\n    }\n    const err = this.__parse(undefined, true)\n    callback(err)\n  }\n  // Central parser implementation\n  __parse(nextBuf, end){\n    const {bom, comment, escape, from_line, info, ltrim, max_record_size, quote, raw, relax, rtrim, skip_empty_lines, to, to_line} = this.options\n    let {record_delimiter} = this.options\n    const {bomSkipped, previousBuf, rawBuffer, escapeIsQuote} = this.state\n    let buf\n    if(previousBuf === undefined){\n      if(nextBuf === undefined){\n        // Handle empty string\n        this.push(null)\n        return\n      }else{\n        buf = nextBuf\n      }\n    }else if(previousBuf !== undefined && nextBuf === undefined){\n      buf = previousBuf\n    }else{\n      buf = Buffer.concat([previousBuf, nextBuf])\n    }\n    // Handle UTF BOM\n    if(bomSkipped === false){\n      if(bom === false){\n        this.state.bomSkipped = true\n      }else if(buf.length < 3){\n        // No enough data\n        if(end === false){\n          // Wait for more data\n          this.state.previousBuf = buf\n          return\n        }\n        // skip BOM detect because data length < 3\n      }else{\n        if(bom_utf8.compare(buf, 0, 3) === 0){\n          // Skip BOM\n          buf = buf.slice(3)\n        }\n        this.state.bomSkipped = true\n      }\n    }\n    const bufLen = buf.length\n    let pos\n    for(pos = 0; pos < bufLen; pos++){\n      // Ensure we get enough space to look ahead\n      // There should be a way to move this out of the loop\n      if(this.__needMoreData(pos, bufLen, end)){\n        break\n      }\n      if(this.state.wasRowDelimiter === true){\n        this.info.lines++\n        if(info === true && this.state.record.length === 0 && this.state.field.length === 0 && this.state.wasQuoting === false){\n          this.state.info = Object.assign({}, this.info)\n        }\n        this.state.wasRowDelimiter = false\n      }\n      if(to_line !== -1 && this.info.lines > to_line){\n        this.state.stop = true\n        this.push(null)\n        return\n      }\n      // Auto discovery of record_delimiter, unix, mac and windows supported\n      if(this.state.quoting === false && record_delimiter.length === 0){\n        const record_delimiterCount = this.__autoDiscoverRowDelimiter(buf, pos)\n        if(record_delimiterCount){\n          record_delimiter = this.options.record_delimiter\n        }\n      }\n      const chr = buf[pos]\n      if(raw === true){\n        rawBuffer.append(chr)\n      }\n      if((chr === cr || chr === nl) && this.state.wasRowDelimiter === false ){\n        this.state.wasRowDelimiter = true\n      }\n      // Previous char was a valid escape char\n      // treat the current char as a regular char\n      if(this.state.escaping === true){\n        this.state.escaping = false\n      }else{\n        // Escape is only active inside quoted fields\n        // We are quoting, the char is an escape chr and there is a chr to escape\n        if(this.state.quoting === true && chr === escape && pos + 1 < bufLen){\n          if(escapeIsQuote){\n            if(buf[pos+1] === quote){\n              this.state.escaping = true\n              continue\n            }\n          }else{\n            this.state.escaping = true\n            continue\n          }\n        }\n        // Not currently escaping and chr is a quote\n        // TODO: need to compare bytes instead of single char\n        if(this.state.commenting === false && chr === quote){\n          if(this.state.quoting === true){\n            const nextChr = buf[pos+1]\n            const isNextChrTrimable = rtrim && this.__isCharTrimable(nextChr)\n            // const isNextChrComment = nextChr === comment\n            const isNextChrComment = comment !== null && this.__compareBytes(comment, buf, pos+1, nextChr)\n            const isNextChrDelimiter = this.__isDelimiter(nextChr, buf, pos+1)\n            const isNextChrRowDelimiter = record_delimiter.length === 0 ? this.__autoDiscoverRowDelimiter(buf, pos+1) : this.__isRecordDelimiter(nextChr, buf, pos+1)\n            // Escape a quote\n            // Treat next char as a regular character\n            // TODO: need to compare bytes instead of single char\n            if(chr === escape && nextChr === quote){\n              pos++\n            }else if(!nextChr || isNextChrDelimiter || isNextChrRowDelimiter || isNextChrComment || isNextChrTrimable){\n              this.state.quoting = false\n              this.state.wasQuoting = true\n              continue\n            }else if(relax === false){\n              const err = this.__error(\n                new CsvError('CSV_INVALID_CLOSING_QUOTE', [\n                  'Invalid Closing Quote:',\n                  `got \"${String.fromCharCode(nextChr)}\"`,\n                  `at line ${this.info.lines}`,\n                  'instead of delimiter, row delimiter, trimable character',\n                  '(if activated) or comment',\n                ], this.__context())\n              )\n              if(err !== undefined) return err\n            }else{\n              this.state.quoting = false\n              this.state.wasQuoting = true\n              // continue\n              this.state.field.prepend(quote)\n            }\n          }else{\n            if(this.state.field.length !== 0){\n              // In relax mode, treat opening quote preceded by chrs as regular\n              if( relax === false ){\n                const err = this.__error(\n                  new CsvError('INVALID_OPENING_QUOTE', [\n                    'Invalid Opening Quote:',\n                    `a quote is found inside a field at line ${this.info.lines}`,\n                  ], this.__context(), {\n                    field: this.state.field,\n                  })\n                )\n                if(err !== undefined) return err\n              }\n            }else{\n              this.state.quoting = true\n              continue\n            }\n          }\n        }\n        if(this.state.quoting === false){\n          let recordDelimiterLength = this.__isRecordDelimiter(chr, buf, pos)\n          if(recordDelimiterLength !== 0){\n            // Do not emit comments which take a full line\n            const skipCommentLine = this.state.commenting && (this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0)\n            if(skipCommentLine){\n              this.info.comment_lines++\n              // Skip full comment line\n            }else{\n              // Skip if line is empty and skip_empty_lines activated\n              if(skip_empty_lines === true && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0){\n                this.info.empty_lines++\n                pos += recordDelimiterLength - 1\n                continue\n              }\n              // Activate records emition if above from_line\n              if(this.state.enabled === false && this.info.lines + (this.state.wasRowDelimiter === true ? 1: 0 ) >= from_line){\n                this.state.enabled = true\n                this.__resetField()\n                this.__resetRow()\n                pos += recordDelimiterLength - 1\n                continue\n              }else{\n                const errField = this.__onField()\n                if(errField !== undefined) return errField\n                const errRecord = this.__onRow()\n                if(errRecord !== undefined) return errRecord\n              }\n              if(to !== -1 && this.info.records >= to){\n                this.state.stop = true\n                this.push(null)\n                return\n              }\n            }\n            this.state.commenting = false\n            pos += recordDelimiterLength - 1\n            continue\n          }\n          if(this.state.commenting){\n            continue\n          }\n          const commentCount = comment === null ? 0 : this.__compareBytes(comment, buf, pos, chr)\n          if(commentCount !== 0){\n            this.state.commenting = true\n            continue\n          }\n          let delimiterLength = this.__isDelimiter(chr, buf, pos)\n          if(delimiterLength !== 0){\n            const errField = this.__onField()\n            if(errField !== undefined) return errField\n            pos += delimiterLength - 1\n            continue\n          }\n        }\n      }\n      if(this.state.commenting === false){\n        if(max_record_size !== 0 && this.state.record_length + this.state.field.length > max_record_size){\n          const err = this.__error(\n            new CsvError('CSV_MAX_RECORD_SIZE', [\n              'Max Record Size:',\n              'record exceed the maximum number of tolerated bytes',\n              `of ${max_record_size}`,\n              `at line ${this.info.lines}`,\n            ], this.__context())\n          )\n          if(err !== undefined) return err\n        }\n      }\n\n      const lappend = ltrim === false || this.state.quoting === true || this.state.field.length !== 0 || !this.__isCharTrimable(chr)\n      // rtrim in non quoting is handle in __onField\n      const rappend = rtrim === false || this.state.wasQuoting === false\n      if( lappend === true && rappend === true ){\n        this.state.field.append(chr)\n      }else if(rtrim === true && !this.__isCharTrimable(chr)){\n        const err = this.__error(\n          new CsvError('CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE', [\n            'Invalid Closing Quote:',\n            'found non trimable byte after quote',\n            `at line ${this.info.lines}`,\n          ], this.__context())\n        )\n        if(err !== undefined) return err\n      }\n    }\n    if(end === true){\n      // Ensure we are not ending in a quoting state\n      if(this.state.quoting === true){\n        const err = this.__error(\n          new CsvError('CSV_QUOTE_NOT_CLOSED', [\n            'Quote Not Closed:',\n            `the parsing is finished with an opening quote at line ${this.info.lines}`,\n          ], this.__context())\n        )\n        if(err !== undefined) return err\n      }else{\n        // Skip last line if it has no characters\n        if(this.state.wasQuoting === true || this.state.record.length !== 0 || this.state.field.length !== 0){\n          const errField = this.__onField()\n          if(errField !== undefined) return errField\n          const errRecord = this.__onRow()\n          if(errRecord !== undefined) return errRecord\n        }else if(this.state.wasRowDelimiter === true){\n          this.info.empty_lines++\n        }else if(this.state.commenting === true){\n          this.info.comment_lines++\n        }\n      }\n    }else{\n      this.state.previousBuf = buf.slice(pos)\n    }\n    if(this.state.wasRowDelimiter === true){\n      this.info.lines++\n      this.state.wasRowDelimiter = false\n    }\n  }\n  // Helper to test if a character is a space or a line delimiter\n  __isCharTrimable(chr){\n    return chr === space || chr === tab || chr === cr || chr === nl\n  }\n  __onRow(){\n    const {columns, info, from, relax_column_count, relax_column_count_less, relax_column_count_more, raw, skip_lines_with_empty_values} = this.options\n    const {enabled, record} = this.state\n    if(enabled === false){\n      return this.__resetRow()\n    }\n    // Convert the first line into column names\n    const recordLength = record.length\n    if(columns === true){\n      if(isRecordEmpty(record)){\n        this.__resetRow()\n        return\n      }\n      return this.__firstLineToColumns(record)\n    }\n    if(columns === false && this.info.records === 0){\n      this.state.expectedRecordLength = recordLength\n    }\n    if(recordLength !== this.state.expectedRecordLength){\n      if(relax_column_count === true || \n        (relax_column_count_less === true && recordLength < this.state.expectedRecordLength) ||\n        (relax_column_count_more === true && recordLength > this.state.expectedRecordLength) ){\n        this.info.invalid_field_length++\n      }else{\n        if(columns === false){\n          const err = this.__error(\n            new CsvError('CSV_INCONSISTENT_RECORD_LENGTH', [\n              'Invalid Record Length:',\n              `expect ${this.state.expectedRecordLength},`,\n              `got ${recordLength} on line ${this.info.lines}`,\n            ], this.__context(), {\n              record: record,\n            })\n          )\n          if(err !== undefined) return err\n        }else{\n          const err = this.__error(\n            // CSV_INVALID_RECORD_LENGTH_DONT_MATCH_COLUMNS\n            new CsvError('CSV_RECORD_DONT_MATCH_COLUMNS_LENGTH', [\n              'Invalid Record Length:',\n              `columns length is ${columns.length},`, // rename columns\n              `got ${recordLength} on line ${this.info.lines}`,\n            ], this.__context(), {\n              record: record,\n            })\n          )\n          if(err !== undefined) return err\n        }\n      }\n    }\n    if(skip_lines_with_empty_values === true){\n      if(isRecordEmpty(record)){\n        this.__resetRow()\n        return\n      }\n    }\n    if(this.state.recordHasError === true){\n      this.__resetRow()\n      this.state.recordHasError = false\n      return\n    }\n    this.info.records++\n    if(from === 1 || this.info.records >= from){\n      if(columns !== false){\n        const obj = {}\n        // Transform record array to an object\n        for(let i in record){\n          if(columns[i] === undefined || columns[i].disabled) continue\n          obj[columns[i].name] = record[i]\n        }\n        const {objname} = this.options\n        if(objname === undefined){\n          if(raw === true || info === true){\n            this.__push(Object.assign(\n              {record: obj},\n              (raw === true ? {raw: this.state.rawBuffer.toString()}: {}),\n              (info === true ? {info: this.state.info}: {})\n            ))\n          }else{\n            this.__push(obj)\n          }\n        }else{\n          if(raw === true || info === true){\n            this.__push(Object.assign(\n              {record: [obj[objname], obj]},\n              raw === true ? {raw: this.state.rawBuffer.toString()}: {},\n              info === true ? {info: this.state.info}: {}\n            ))\n          }else{\n            this.__push([obj[objname], obj])\n          }\n        }\n      }else{\n        if(raw === true || info === true){\n          this.__push(Object.assign(\n            {record: record},\n            raw === true ? {raw: this.state.rawBuffer.toString()}: {},\n            info === true ? {info: this.state.info}: {}\n          ))\n        }else{\n          this.__push(record)\n        }\n      }\n    }\n    this.__resetRow()\n  }\n  __firstLineToColumns(record){\n    const {firstLineToHeaders} = this.state\n    try{\n      const headers = firstLineToHeaders === undefined ? record : firstLineToHeaders.call(null, record)\n      if(!Array.isArray(headers)){\n        return this.__error(\n          new CsvError('CSV_INVALID_COLUMN_MAPPING', [\n            'Invalid Column Mapping:',\n            'expect an array from column function,',\n            `got ${JSON.stringify(headers)}`\n          ], this.__context(), {\n            headers: headers,\n          })\n        )\n      }\n      const normalizedHeaders = normalizeColumnsArray(headers)\n      this.state.expectedRecordLength = normalizedHeaders.length\n      this.options.columns = normalizedHeaders\n      this.__resetRow()\n      return\n    }catch(err){\n      return err\n    }\n  }\n  __resetRow(){\n    if(this.options.raw === true){\n      this.state.rawBuffer.reset()\n    }\n    this.state.record = []\n    this.state.record_length = 0\n  }\n  __onField(){\n    const {cast, rtrim, max_record_size} = this.options\n    const {enabled, wasQuoting} = this.state\n    // Short circuit for the from_line options\n    if(enabled === false){ /* this.options.columns !== true && */\n      return this.__resetField()\n    }\n    let field = this.state.field.toString()\n    if(rtrim === true && wasQuoting === false){\n      field = field.trimRight()\n    }\n    if(cast === true){\n      const [err, f] = this.__cast(field)\n      if(err !== undefined) return err\n      field = f\n    }\n    this.state.record.push(field)\n    // Increment record length if record size must not exceed a limit\n    if(max_record_size !== 0 && typeof field === 'string'){\n      this.state.record_length += field.length\n    }\n    this.__resetField()\n  }\n  __resetField(){\n    this.state.field.reset()\n    this.state.wasQuoting = false\n  }\n  __push(record){\n    const {on_record} = this.options\n    if(on_record !== undefined){\n      const context = this.__context()\n      record = on_record.call(null, record, context)\n      if(record === undefined || record === null){ return }\n    }\n    this.push(record)\n  }\n  // Return a tuple with the error and the casted value\n  __cast(field){\n    const {columns, relax_column_count} = this.options\n    const isColumns = Array.isArray(columns)\n    // Dont loose time calling cast\n    // because the final record is an object\n    // and this field can't be associated to a key present in columns\n    if( isColumns === true && relax_column_count && this.options.columns.length <= this.state.record.length ){\n      return [undefined, undefined]\n    }\n    const context = this.__context()\n    if(this.state.castField !== null){\n      try{\n        return [undefined, this.state.castField.call(null, field, context)]\n      }catch(err){\n        return [err]\n      }\n    }\n    if(this.__isFloat(field)){\n      return [undefined, parseFloat(field)]\n    }else if(this.options.cast_date !== false){\n      return [undefined, this.options.cast_date.call(null, field, context)]\n    }\n    return [undefined, field]\n  }\n  // Keep it in case we implement the `cast_int` option\n  // __isInt(value){\n  //   // return Number.isInteger(parseInt(value))\n  //   // return !isNaN( parseInt( obj ) );\n  //   return /^(\\-|\\+)?[1-9][0-9]*$/.test(value)\n  // }\n  __isFloat(value){\n    return (value - parseFloat( value ) + 1) >= 0 // Borrowed from jquery\n  }\n  __compareBytes(sourceBuf, targetBuf, pos, firtByte){\n    if(sourceBuf[0] !== firtByte) return 0\n    const sourceLength = sourceBuf.length\n    for(let i = 1; i < sourceLength; i++){\n      if(sourceBuf[i] !== targetBuf[pos+i]) return 0\n    }\n    return sourceLength\n  }\n  __needMoreData(i, bufLen, end){\n    if(end){\n      return false\n    }\n    const {comment, delimiter} = this.options\n    const {quoting, recordDelimiterMaxLength} = this.state\n    const numOfCharLeft = bufLen - i - 1\n    const requiredLength = Math.max(\n      // Skip if the remaining buffer smaller than comment\n      comment ? comment.length : 0,\n      // Skip if the remaining buffer smaller than row delimiter\n      recordDelimiterMaxLength,\n      // Skip if the remaining buffer can be row delimiter following the closing quote\n      // 1 is for quote.length\n      quoting ? (1 + recordDelimiterMaxLength) : 0,\n      // Skip if the remaining buffer can be delimiter\n      delimiter.length,\n      // Skip if the remaining buffer can be escape sequence\n      // 1 is for escape.length\n      1\n    )\n    return numOfCharLeft < requiredLength\n  }\n  __isDelimiter(chr, buf, pos){\n    const {delimiter} = this.options\n    const delLength = delimiter.length\n    if(delimiter[0] !== chr) return 0\n    for(let i = 1; i < delLength; i++){\n      if(delimiter[i] !== buf[pos+i]) return 0\n    }\n    return delimiter.length\n  }\n  __isRecordDelimiter(chr, buf, pos){\n    const {record_delimiter} = this.options\n    const recordDelimiterLength = record_delimiter.length\n    loop1: for(let i = 0; i < recordDelimiterLength; i++){\n      const rd = record_delimiter[i]\n      const rdLength = rd.length\n      if(rd[0] !== chr){\n        continue\n      }\n      for(let j = 1; j < rdLength; j++){\n        if(rd[j] !== buf[pos+j]){\n          continue loop1\n        }\n      }\n      return rd.length\n    }\n    return 0\n  }\n  __autoDiscoverRowDelimiter(buf, pos){\n    const chr = buf[pos]\n    if(chr === cr){\n      if(buf[pos+1] === nl){\n        this.options.record_delimiter.push(Buffer.from('\\r\\n'))\n        this.state.recordDelimiterMaxLength = 2\n        return 2\n      }else{\n        this.options.record_delimiter.push(Buffer.from('\\r'))\n        this.state.recordDelimiterMaxLength = 1\n        return 1\n      }\n    }else if(chr === nl){\n      this.options.record_delimiter.push(Buffer.from('\\n'))\n      this.state.recordDelimiterMaxLength = 1\n      return 1\n    }\n    return 0\n  }\n  __error(msg){\n    const {skip_lines_with_error} = this.options\n    const err = typeof msg === 'string' ? new Error(msg) : msg\n    if(skip_lines_with_error){\n      this.state.recordHasError = true\n      this.emit('skip', err)\n      return undefined\n    }else{\n      return err\n    }\n  }\n  __context(){\n    const {columns} = this.options\n    const isColumns = Array.isArray(columns)\n    return {\n      column: isColumns === true ?\n        ( columns.length > this.state.record.length ?\n          columns[this.state.record.length].name :\n          null\n        ) :\n        this.state.record.length,\n      empty_lines: this.info.empty_lines,\n      header: columns === true,\n      index: this.state.record.length,\n      invalid_field_length: this.info.invalid_field_length,\n      quoting: this.state.wasQuoting,\n      lines: this.info.lines,\n      records: this.info.records\n    }\n  }\n}\n\nconst parse = function(){\n  let data, options, callback\n  for(let i in arguments){\n    const argument = arguments[i]\n    const type = typeof argument\n    if(data === undefined && (typeof argument === 'string' || Buffer.isBuffer(argument))){\n      data = argument\n    }else if(options === undefined && isObject(argument)){\n      options = argument\n    }else if(callback === undefined && type === 'function'){\n      callback = argument\n    }else{\n      throw new CsvError('CSV_INVALID_ARGUMENT', [\n        'Invalid argument:',\n        `got ${JSON.stringify(argument)} at index ${i}`\n      ])\n    }\n  }\n  const parser = new Parser(options)\n  if(callback){\n    const records = options === undefined || options.objname === undefined ? [] : {}\n    parser.on('readable', function(){\n      let record\n      while((record = this.read()) !== null){\n        if(options === undefined || options.objname === undefined){\n          records.push(record)\n        }else{\n          records[record[0]] = record[1]\n        }\n      }\n    })\n    parser.on('error', function(err){\n      callback(err, undefined, parser.info)\n    })\n    parser.on('end', function(){\n      callback(undefined, records, parser.info)\n    })\n  }\n  if(data !== undefined){\n    parser.write(data)\n    parser.end()\n  }\n  return parser\n}\n\nclass CsvError extends Error {\n  constructor(code, message, ...contexts) {\n    if(Array.isArray(message)) message = message.join(' ')\n    super(message)\n    if(Error.captureStackTrace !== undefined){\n      Error.captureStackTrace(this, CsvError)\n    }\n    this.code = code\n    for(const context of contexts){\n      for(const key in context){\n        const value = context[key]\n        this[key] = Buffer.isBuffer(value) ? value.toString() : value == null ? value : JSON.parse(JSON.stringify(value))\n      }\n    }\n  }\n}\n\nparse.Parser = Parser\n\nparse.CsvError = CsvError\n\nmodule.exports = parse\n\nconst underscore = function(str){\n  return str.replace(/([A-Z])/g, function(_, match){\n    return '_' + match.toLowerCase()\n  })\n}\n\nconst isObject = function(obj){\n  return (typeof obj === 'object' && obj !== null && !Array.isArray(obj))\n}\n\nconst isRecordEmpty = function(record){\n  return record.every( (field) => field == null || field.toString && field.toString().trim() === '' )\n}\n\nconst normalizeColumnsArray = function(columns){\n  const normalizedColumns = [];\n\n  for(let i=0; i< columns.length; i++){\n    const column = columns[i]\n    if(column === undefined || column === null || column === false){\n      normalizedColumns[i] = { disabled: true }\n    }else if(typeof column === 'string'){\n      normalizedColumns[i] = { name: column }\n    }else if(isObject(column)){\n      if(typeof column.name !== 'string'){\n        throw new CsvError('CSV_OPTION_COLUMNS_MISSING_NAME', [\n          'Option columns missing name:',\n          `property \"name\" is required at position ${i}`,\n          'when column is an object literal'\n        ])\n      }\n      normalizedColumns[i] = column\n    }else{\n      throw new CsvError('CSV_INVALID_COLUMN_DEFINITION', [\n        'Invalid column definition:',\n        'expect a string or a literal object,',\n        `got ${JSON.stringify(column)} at position ${i}`\n      ])\n    }\n  }\n  return normalizedColumns;\n}\n"]},"metadata":{},"sourceType":"script"}