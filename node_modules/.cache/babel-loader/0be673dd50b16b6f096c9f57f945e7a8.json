{"ast":null,"code":"import React,{lazy,Suspense}from\"react\";import EmptyTable from\"./EmptyTable\";import{editable}from\"./grid-fns\";import{DraggableHeader}from\"react-data-grid-addons\";import isEqual from\"lodash/isEqual\";import isEmpty from\"lodash/isEmpty\";import xorWith from\"lodash/xorWith\";import Loading from\"../Loading\";var ReactDataGrid=lazy(function(){return import(\"react-data-grid\");});var DraggableContainer=DraggableHeader.DraggableContainer;var Grid=function Grid(props){var onHeaderDrop=props.onHeaderDrop,rowHeight=props.rowHeight,columns=props.columns,RowRenderer=props.RowRenderer,handleRowGetter=props.handleRowGetter,tableHeight=props.tableHeight,onGridRowsUpdated=props.onGridRowsUpdated,rows=props.rows,resizeColumn=props.resizeColumn,loadingRows=props.loadingRows,addRow=props.addRow,setSelectedCell=props.setSelectedCell;return React.createElement(Suspense,{fallback:React.createElement(Loading,{message:\"Loading table\"})},React.createElement(DraggableContainer,{onHeaderDrop:onHeaderDrop},React.createElement(ReactDataGrid,{headerRowHeight:47,rowRenderer:RowRenderer,rowHeight:rowHeight,columns:columns,enableCellSelect:true// makes text based cells editable\n,rowGetter:handleRowGetter,rowsCount:rows.length,onGridRowsUpdated:onGridRowsUpdated,minHeight:tableHeight,onCellSelected:function onCellSelected(coordinates){var row=rows[coordinates.rowIdx];var column=columns[coordinates.idx];if(editable(column.type)){//only editable fields are stored selectedCell, temporary fix for custom fields\nsetSelectedCell({row:row,column:column});}},onColumnResize:function onColumnResize(idx,width){return(//tableActions.column.resize(idx, width)\nresizeColumn(idx,width));},emptyRowsView:function emptyRowsView(){return React.createElement(EmptyTable//isLoading={tableState.loadingRows}\n,{isLoading:loadingRows,tableHeight:tableHeight,addRow:addRow});}})));};export var isArrayEqual=function isArrayEqual(x,y){return isEmpty(xorWith(x,y,isEqual));};export default React.memo(Grid,function(prevProps,nextProps){return isArrayEqual(prevProps.columns,nextProps.columns)&&isArrayEqual(prevProps.rows,nextProps.rows)// || prevProps.rowHeight === nextProps.rowHeight ||\n// prevProps.tableHeight === nextProps.tableHeight\n;});","map":{"version":3,"sources":["/Users/monsama/firetable/www/src/components/Table/Grid.tsx"],"names":["React","lazy","Suspense","EmptyTable","editable","DraggableHeader","isEqual","isEmpty","xorWith","Loading","ReactDataGrid","DraggableContainer","Grid","props","onHeaderDrop","rowHeight","columns","RowRenderer","handleRowGetter","tableHeight","onGridRowsUpdated","rows","resizeColumn","loadingRows","addRow","setSelectedCell","length","coordinates","row","rowIdx","column","idx","type","width","isArrayEqual","x","y","memo","prevProps","nextProps"],"mappings":"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","sourcesContent":["import React, { lazy, Suspense } from \"react\";\nimport EmptyTable from \"./EmptyTable\";\nimport { editable } from \"./grid-fns\";\nimport { DraggableHeader } from \"react-data-grid-addons\";\nimport isEqual from \"lodash/isEqual\";\nimport isEmpty from \"lodash/isEmpty\";\nimport xorWith from \"lodash/xorWith\";\nimport Loading from \"../Loading\";\n\nconst ReactDataGrid = lazy(() => import(\"react-data-grid\"));\nconst { DraggableContainer } = DraggableHeader;\nconst Grid = (props: any) => {\n  const {\n    onHeaderDrop,\n    rowHeight,\n    columns,\n    RowRenderer,\n    handleRowGetter,\n    tableHeight,\n    onGridRowsUpdated,\n    rows,\n    resizeColumn,\n    loadingRows,\n    addRow,\n    setSelectedCell,\n  } = props;\n  return (\n    <Suspense fallback={<Loading message=\"Loading table\" />}>\n      <DraggableContainer onHeaderDrop={onHeaderDrop}>\n        <ReactDataGrid\n          headerRowHeight={47}\n          rowRenderer={RowRenderer}\n          rowHeight={rowHeight}\n          columns={columns}\n          enableCellSelect={true} // makes text based cells editable\n          rowGetter={handleRowGetter}\n          rowsCount={rows.length}\n          onGridRowsUpdated={onGridRowsUpdated}\n          minHeight={tableHeight}\n          onCellSelected={(coordinates: { rowIdx: number; idx: number }) => {\n            const row = rows[coordinates.rowIdx];\n            const column = columns[coordinates.idx];\n            if (editable(column.type)) {\n              //only editable fields are stored selectedCell, temporary fix for custom fields\n              setSelectedCell({ row, column });\n            }\n          }}\n          onColumnResize={(idx: number, width: number) =>\n            //tableActions.column.resize(idx, width)\n            resizeColumn(idx, width)\n          }\n          emptyRowsView={() => (\n            <EmptyTable\n              //isLoading={tableState.loadingRows}\n              isLoading={loadingRows}\n              tableHeight={tableHeight}\n              addRow={addRow}\n            />\n          )}\n        />\n      </DraggableContainer>\n    </Suspense>\n  );\n};\n\nexport const isArrayEqual = (x: any, y: any) => isEmpty(xorWith(x, y, isEqual));\n\nexport default React.memo(Grid, (prevProps, nextProps) => {\n  return (\n    isArrayEqual(prevProps.columns, nextProps.columns) &&\n    isArrayEqual(prevProps.rows, nextProps.rows)\n    // || prevProps.rowHeight === nextProps.rowHeight ||\n    // prevProps.tableHeight === nextProps.tableHeight\n  );\n});\n"]},"metadata":{},"sourceType":"module"}