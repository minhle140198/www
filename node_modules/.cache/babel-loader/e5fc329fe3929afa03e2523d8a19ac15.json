{"ast":null,"code":"import _defineProperty from\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/monsama/firetable/www/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useReducer}from\"react\";import{bucket}from\"../../firebase/index\";import firebase from\"firebase/app\";var initialState={progress:0};var uploadReducer=function uploadReducer(prevState,newProps){return _objectSpread({},prevState,{},newProps);};var useUploader=function useUploader(){var _useReducer=useReducer(uploadReducer,_objectSpread({},initialState)),_useReducer2=_slicedToArray(_useReducer,2),uploaderState=_useReducer2[0],uploaderDispatch=_useReducer2[1];var upload=function upload(docRef,fieldName,files,previousValue){files.forEach(function(file){var storageRef=bucket.ref(\"\".concat(docRef.path,\"/\").concat(fieldName,\"/\").concat(file.name));var uploadTask=storageRef.put(file);uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED,// or 'state_changed'\nfunction(snapshot){// Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\nvar progress=snapshot.bytesTransferred/snapshot.totalBytes*100;uploaderDispatch({progress:progress});console.log(\"Upload is \"+progress+\"% done\");switch(snapshot.state){case firebase.storage.TaskState.PAUSED:// or 'paused'\nconsole.log(\"Upload is paused\");break;case firebase.storage.TaskState.RUNNING:// or 'running'\nconsole.log(\"Upload is running\");break;}},function(error){// A full list of error codes is available at\n// https://firebase.google.com/docs/storage/web/handle-errors\nswitch(error.code){case\"storage/unauthorized\":// User doesn't have permission to access the object\nbreak;case\"storage/canceled\":// User canceled the upload\nbreak;case\"storage/unknown\":// Unknown error occurred, inspect error.serverResponse\nbreak;}},function(){// Upload completed successfully, now we can get the download URL\nuploadTask.snapshot.ref.getDownloadURL().then(function(downloadURL){console.log(\"File available at\",downloadURL);if(previousValue){docRef.update(_defineProperty({},fieldName,[].concat(_toConsumableArray(previousValue),[{downloadURL:downloadURL,name:file.name,type:file.type,lastModifiedTS:file.lastModified}])));}else{docRef.update(_defineProperty({},fieldName,[{downloadURL:downloadURL,name:file.name,type:file.type,lastModifiedTS:file.lastModified}]));}});});});};return[uploaderState,upload];};export default useUploader;","map":{"version":3,"sources":["/Users/monsama/firetable/www/src/hooks/useFiretable/useUploader.ts"],"names":["useReducer","bucket","firebase","initialState","progress","uploadReducer","prevState","newProps","useUploader","uploaderState","uploaderDispatch","upload","docRef","fieldName","files","previousValue","forEach","file","storageRef","ref","path","name","uploadTask","put","on","storage","TaskEvent","STATE_CHANGED","snapshot","bytesTransferred","totalBytes","console","log","state","TaskState","PAUSED","RUNNING","error","code","getDownloadURL","then","downloadURL","update","type","lastModifiedTS","lastModified"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\nimport { bucket } from \"../../firebase/index\";\n\nimport firebase from \"firebase/app\";\nconst initialState = { progress: 0 };\nconst uploadReducer = (prevState: any, newProps: any) => {\n  return { ...prevState, ...newProps };\n};\nconst useUploader = () => {\n  const [uploaderState, uploaderDispatch] = useReducer(uploadReducer, {\n    ...initialState,\n  });\n\n  const upload = (\n    docRef: firebase.firestore.DocumentReference,\n    fieldName: string,\n    files: File[],\n    previousValue?: any\n  ) => {\n    files.forEach(file => {\n      const storageRef = bucket.ref(`${docRef.path}/${fieldName}/${file.name}`);\n      var uploadTask = storageRef.put(file);\n      uploadTask.on(\n        firebase.storage.TaskEvent.STATE_CHANGED, // or 'state_changed'\n        function(snapshot: any) {\n          // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n          var progress =\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          uploaderDispatch({ progress });\n          console.log(\"Upload is \" + progress + \"% done\");\n          switch (snapshot.state) {\n            case firebase.storage.TaskState.PAUSED: // or 'paused'\n              console.log(\"Upload is paused\");\n              break;\n            case firebase.storage.TaskState.RUNNING: // or 'running'\n              console.log(\"Upload is running\");\n              break;\n          }\n        },\n        function(error: any) {\n          // A full list of error codes is available at\n          // https://firebase.google.com/docs/storage/web/handle-errors\n          switch (error.code) {\n            case \"storage/unauthorized\":\n              // User doesn't have permission to access the object\n              break;\n\n            case \"storage/canceled\":\n              // User canceled the upload\n              break;\n            case \"storage/unknown\":\n              // Unknown error occurred, inspect error.serverResponse\n              break;\n          }\n        },\n        function() {\n          // Upload completed successfully, now we can get the download URL\n          uploadTask.snapshot.ref\n            .getDownloadURL()\n            .then(function(downloadURL: string) {\n              console.log(\"File available at\", downloadURL);\n              if (previousValue) {\n                docRef.update({\n                  [fieldName]: [\n                    ...previousValue,\n                    {\n                      downloadURL,\n                      name: file.name,\n                      type: file.type,\n                      lastModifiedTS: file.lastModified,\n                    },\n                  ],\n                });\n              } else {\n                docRef.update({\n                  [fieldName]: [\n                    {\n                      downloadURL,\n                      name: file.name,\n                      type: file.type,\n                      lastModifiedTS: file.lastModified,\n                    },\n                  ],\n                });\n              }\n            });\n        }\n      );\n    });\n  };\n\n  return [uploaderState, upload];\n};\n\nexport default useUploader;\n"]},"metadata":{},"sourceType":"module"}