{"version":3,"sources":["components/SearchBox.tsx"],"names":["searchClient","algoliasearch","process","useStyles","makeStyles","createStyles","modal","display","alignItems","justifyContent","paper","root","position","flexWrap","minWidth","typography","searchField","width","padding","list","backgroundColor","maxHeight","overflowY","SearchBox","props","searchData","clearSearch","collection","onSubmit","config","useState","query","setQuery","classes","hits","setHits","undefined","algoliaIndex","setAlgoliaIndex","useEffect","initIndex","search","a","async","resp","open","Boolean","clear","aria-labelledby","aria-describedby","className","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","in","placeholder","autoFocus","value","onChange","e","target","map","hit","button","onClick","snapshot","_highlightResult","docPath","objectID","primary","primaryKeys","key","secondary","secondaryKeys","Hit"],"mappings":"iRAeMA,EAAeC,IAEfC,aAGAA,oCAIAC,EAAYC,aAAW,kBAC3BC,YAAa,CACXC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAElBC,MAAO,GACPC,KAAM,CACJC,SAAU,WACVL,QAAS,OACTM,SAAU,OACVC,SAAU,KAEZC,WAAY,GAEZC,YAAa,CACXC,MAAO,OACPC,QAAS,IAEXC,KAAM,CACJC,gBAAiB,OACjBN,SAAU,IACVO,UAAW,IACXC,UAAW,eA4GFC,UA/FG,SAACC,GAAkB,IAC3BC,EAA4BD,EAA5BC,WAAYC,EAAgBF,EAAhBE,YACZC,EAAiCF,EAAjCE,WAAYC,EAAqBH,EAArBG,SAAUC,EAAWJ,EAAXI,OAFI,EAGRC,mBAAS,IAHD,mBAG3BC,EAH2B,KAGpBC,EAHoB,KAI5BC,EAAU9B,IAJkB,EAMV2B,mBAAgB,IANN,mBAM3BI,EAN2B,KAMrBC,EANqB,OAOML,wBAEtCM,GATgC,mBAO3BC,EAP2B,KAObC,EAPa,KAUlCC,qBAAU,WACJZ,GACFW,EAAgBtC,EAAawC,UAAUb,MAExC,CAACA,IACJY,qBAAU,WACJF,GACFI,EAAO,MAER,CAACJ,IAEJ,IAAMI,EAAS,SAAOV,GAAP,eAAAW,EAAAC,OAAA,oDACTN,EADS,kCAAAK,EAAA,MAEQL,EAAaI,OAAO,CAAEV,WAF9B,OAELa,EAFK,OAGXT,EAAQS,EAAKV,MAHF,sCAMfK,qBAAU,WACRE,EAAOV,KACN,CAACA,IAEJ,IAAMc,EAAOC,QAAQnB,GAwBfoB,EAAQ,oBAAAL,EAAAC,OAAA,kEAAAD,EAAA,MACNP,EAAQ,KADF,yBAAAO,EAAA,MAENV,EAAS,KAFH,OAGZN,IAHY,sCAKd,OACE,kBAAC,IAAD,CACEsB,kBAAgB,yBAChBC,mBAAiB,+BACjBC,UAAWjB,EAAQ3B,MACnBuC,KAAMA,EACNM,QAAS,WACPJ,KAEFK,sBAAoB,EACpBC,kBAAmBC,IACnBC,cAAe,CACbC,QAAS,MAGX,kBAAC,IAAD,CAAMC,GAAIZ,GACR,kBAAC,IAAD,CAAOK,UAAWjB,EAAQvB,OACxB,kBAAC,IAAD,CACEwC,UAAWjB,EAAQjB,YACnB0C,YAAY,0BACZC,WAAS,EACTC,MAAO7B,EACP8B,SAAU,SAACC,GACT9B,EAAS8B,EAAEC,OAAOH,UAItB,kBAAC,IAAD,CAAMV,UAAWjB,EAAQd,MACtBe,EAAK8B,KAAI,SAACC,GAAD,OAvDR,SAACA,GAAD,OACV,kBAAC,IAAD,CACEC,QAAM,EACNC,QAAS,WACP,IAAIC,EAAQ,eAAQH,UACbG,EAASC,iBACZzC,IACFA,EAAS,CAAEwC,WAAUE,QAAQ,GAAD,OAAK3C,EAAL,YAAmByC,EAASG,YACxDxB,OAIJ,kBAAC,IAAD,CACEyB,QACE3C,GAAUA,EAAO4C,YAAYT,KAAI,SAACU,GAAD,gBAAoBT,EAAIS,GAAxB,QAEnCC,UACE9C,GAAUA,EAAO+C,cAAcZ,KAAI,SAACU,GAAD,gBAAoBT,EAAIS,GAAxB,WAsCTG,CAAIZ","file":"static/js/32.eab5ab87.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport algoliasearch from \"algoliasearch/lite\";\n\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport TextField from \"@material-ui/core/TextField\";\n\nconst searchClient = algoliasearch(\n  process.env.REACT_APP_ALGOLIA_APP_ID\n    ? process.env.REACT_APP_ALGOLIA_APP_ID\n    : \"\",\n  process.env.REACT_APP_ALGOLIA_SEARCH_API_KEY\n    ? process.env.REACT_APP_ALGOLIA_SEARCH_API_KEY\n    : \"\"\n);\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    modal: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    paper: {},\n    root: {\n      position: \"relative\",\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      minWidth: 200,\n    },\n    typography: {},\n\n    searchField: {\n      width: \"100%\",\n      padding: 20,\n    },\n    list: {\n      backgroundColor: \"#fff\",\n      minWidth: 200,\n      maxHeight: 400,\n      overflowY: \"scroll\",\n    },\n  })\n);\ninterface Props {\n  searchData: {\n    collection: string;\n    onSubmit: Function | undefined;\n    config: any;\n  };\n  clearSearch: Function;\n}\n\nconst SearchBox = (props: Props) => {\n  const { searchData, clearSearch } = props;\n  const { collection, onSubmit, config } = searchData;\n  const [query, setQuery] = useState(\"\");\n  const classes = useStyles();\n\n  const [hits, setHits] = useState<any[]>([]);\n  const [algoliaIndex, setAlgoliaIndex] = useState<\n    algoliasearch.Index | undefined\n  >(undefined);\n  useEffect(() => {\n    if (collection) {\n      setAlgoliaIndex(searchClient.initIndex(collection));\n    }\n  }, [collection]);\n  useEffect(() => {\n    if (algoliaIndex) {\n      search(\"\");\n    }\n  }, [algoliaIndex]);\n\n  const search = async (query: string) => {\n    if (algoliaIndex) {\n      const resp = await algoliaIndex.search({ query });\n      setHits(resp.hits);\n    }\n  };\n  useEffect(() => {\n    search(query);\n  }, [query]);\n\n  const open = Boolean(collection);\n  const id = open ? \"no-transition-popper\" : undefined;\n  const Hit = (hit: any) => (\n    <ListItem\n      button\n      onClick={() => {\n        let snapshot = { ...hit };\n        delete snapshot._highlightResult;\n        if (onSubmit) {\n          onSubmit({ snapshot, docPath: `${collection}/${snapshot.objectID}` });\n          clear();\n        }\n      }}\n    >\n      <ListItemText\n        primary={\n          config && config.primaryKeys.map((key: string) => `${hit[key]} `)\n        }\n        secondary={\n          config && config.secondaryKeys.map((key: string) => `${hit[key]} `)\n        }\n      />\n    </ListItem>\n  );\n  const clear = async () => {\n    await setHits([]);\n    await setQuery(\"\");\n    clearSearch();\n  };\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      className={classes.modal}\n      open={open}\n      onClose={() => {\n        clear();\n      }}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={open}>\n        <Paper className={classes.paper}>\n          <TextField\n            className={classes.searchField}\n            placeholder=\"type to start searching\"\n            autoFocus\n            value={query}\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              setQuery(e.target.value);\n            }}\n          />\n          {/* results for {query} */}\n          <List className={classes.list}>\n            {hits.map((hit: any) => Hit(hit))}\n          </List>\n        </Paper>\n      </Fade>\n    </Modal>\n  );\n};\nexport default SearchBox;\n"],"sourceRoot":""}