{"version":3,"sources":["components/ImportCSV.tsx","components/ExportCSV.tsx","components/MultiSelect.tsx","components/Table/Filters/index.tsx","components/Table/TableHeader.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","display","flexWrap","formControl","margin","spacing","minWidth","selectEmpty","marginTop","keyPair","flexGrow","justifyItems","cloudIcon","fontSize","uploadContainer","ImportCSV","props","columns","addRow","classes","useState","open","setOpen","csvKeys","setCsvKeys","keyPairs","setKeyPairs","csvKey","setCsvKey","columnKey","setColumnKey","csvData","setCsvData","onDrop","useCallback","acceptedFiles","a","async","file","reader","FileReader","onload","event","csvString","target","result","parse","err","output","keys","shift","readAsText","useDropzone","multiple","getRootProps","getInputProps","isDragActive","handleClose","Button","color","onClick","endIcon","Dialog","onClose","aria-labelledby","DialogTitle","id","DialogContent","length","Grid","container","direction","justify","alignContent","alignItems","Typography","variant","className","map","index","IconButton","clonedPairs","splice","FormControl","InputLabel","htmlFor","Select","value","onChange","e","v","inputProps","name","key","MenuItem","column","DialogActions","row","docData","forEach","pair","indexOf","disabled","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","chips","chip","ExportCSV","collection","filters","csvColumns","setCSVColumns","snackContext","useContext","SnackContext","handleExport","message","duration","exportTable","collectionPath","allFields","Boolean","data","blob","Blob","type","saveAs","input","Input","renderValue","selected","Chip","label","selectRoot","paddingRight","paper","overflow","menuChild","padding","maxWidth","grid","outline","noMargins","searchRow","chipListRow","background","palette","backgroundImage","backgroundPosition","backgroundSize","position","content","top","left","right","zIndex","height","bottom","chipList","searchable","freeText","maxHeightDeductions","overflowY","minHeight","selectedChip","backgroundColor","divider","chipLabel","whiteSpace","footerRow","marginBottom","addCustomButton","marginLeft","selectedRow","selectAllButton","marginRight","selectedNum","fontFeatureSettings","measureChip","visibility","MultipleSelect","optionsProp","options","field","itemRenderer","selectAll","TextFieldProps","dropdownWidth","setDropdownWidth","filterState","setFilterState","select","option","deselect","filter","item","formattedValues","x","_unionWith","b","customField","setCustomField","handleAddCustom","longestLabel","reduce","acc","curr","TextField","clsx","SelectProps","list","MenuListProps","disablePadding","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","ref","el","getBoundingClientRect","fullWidth","InputProps","endAdornment","InputAdornment","stopPropagation","onKeyDown","xs","toUpperCase","includes","isSelected","icon","component","size","onKeyPress","o","Portal","role","OPERATORS","compatibleTypes","FieldType","PhoneNumber","date","dateTime","simpleText","singleSelect","url","email","multiSelect","number","closeButton","topRow","bottomButtons","Filters","setFilters","filterColumns","c","image","pop","selectedColumn","setSelectedColumn","operator","query","setQuery","useEffect","updatedQuery","operators","anchorEl","setAnchorEl","undefined","currentTarget","startIcon","Popover","hiddenLabel","_find","displayEmpty","console","log","longText","placeholder","val","Array","isArray","fieldName","renderInputField","collectionName","textTransform","TableHeader","rowHeight","updateConfig","tableActions","child","labelWidth","tableFilters","table","config"],"mappings":"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","file":"static/js/19.78a6dfd5.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport _camelCase from \"lodash/camelCase\";\nimport { useDropzone } from \"react-dropzone\";\nimport parse from \"csv-parse\";\n\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Dialog from \"@material-ui/core/Dialog\";\n\nimport Select from \"@material-ui/core/Select\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport AddCSVIcon from \"@material-ui/icons/PlaylistAdd\";\nimport ArrowIcon from \"@material-ui/icons/TrendingFlatOutlined\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport CloudIcon from \"@material-ui/icons/CloudUpload\";\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n    keyPair: {\n      flexGrow: 2,\n      display: \"flex\",\n      justifyItems: \"space-between\",\n    },\n    cloudIcon: {\n      fontSize: 64,\n    },\n    uploadContainer: {\n      margin: \"auto\",\n    },\n  })\n);\n\n// TODO: Create an interface for props\nexport default function ImportCSV(props: any) {\n  const { columns, addRow } = props;\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [csvKeys, setCsvKeys] = useState<string[]>([]);\n  const [keyPairs, setKeyPairs] = useState<\n    { csvKey: string; columnKey: string }[]\n  >([]);\n  const [csvKey, setCsvKey] = useState();\n  const [columnKey, setColumnKey] = useState();\n  const [csvData, setCsvData] = useState<any[]>([]);\n  const onDrop = useCallback(async acceptedFiles => {\n    const file = acceptedFiles[0];\n    var reader = new FileReader();\n    reader.onload = function(event: any) {\n      const csvString = event.target.result;\n      parse(csvString, {}, function(err, output) {\n        const keys = output.shift();\n        setCsvData(output);\n        setCsvKeys(keys);\n      });\n    };\n    reader.readAsText(file);\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    multiple: false,\n  });\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n    setKeyPairs([]);\n    setCsvKeys([]);\n    setCsvKey(null);\n    setColumnKey(null);\n  }\n  function handleImport() {\n    const newDocs = csvData.map((row: any[]) => {\n      let docData: any = {};\n      keyPairs.forEach((pair: { columnKey: string; csvKey: string }) => {\n        docData[pair.columnKey] = row[csvKeys.indexOf(pair.csvKey)];\n      });\n      addRow(docData);\n      return docData;\n    });\n    handleClose();\n  }\n\n  return (\n    <div>\n      <Button\n        color=\"secondary\"\n        onClick={handleClickOpen}\n        endIcon={<AddCSVIcon />}\n      >\n        Import CSV\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Import a CSV file</DialogTitle>\n        <DialogContent>\n          {csvKeys.length === 0 ? (\n            <div {...getRootProps()}>\n              <input {...getInputProps()} />\n              <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignContent=\"center\"\n                alignItems=\"center\"\n              >\n                <Typography variant=\"subtitle1\">\n                  Drag 'n' drop a .csv file here\n                </Typography>\n\n                <CloudIcon className={classes.cloudIcon} />\n                <Typography variant=\"subtitle1\">or</Typography>\n                {isDragActive ? (\n                  <p>Drop the file here ...</p>\n                ) : (\n                  <Button color=\"secondary\">click to select a file</Button>\n                )}\n              </Grid>\n            </div>\n          ) : (\n            <Grid container direction=\"column\">\n              {keyPairs.map((keyPair: any, index: number) => (\n                <Grid\n                  container\n                  direction=\"row\"\n                  alignItems=\"center\"\n                  justify=\"space-between\"\n                >\n                  <Typography>{keyPair.csvKey}</Typography>\n                  <ArrowIcon />\n                  <Typography>{keyPair.columnKey}</Typography>\n                  <IconButton\n                    onClick={() => {\n                      let clonedPairs = [...keyPairs];\n                      clonedPairs.splice(index, 1);\n                      setKeyPairs(clonedPairs);\n                    }}\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                </Grid>\n              ))}\n              <Grid container direction=\"row\" alignItems=\"center\">\n                <FormControl className={classes.formControl}>\n                  <InputLabel htmlFor=\"csv-keys\">csv Fields</InputLabel>\n                  <Select\n                    value={csvKey}\n                    onChange={(e: any, v: any) => {\n                      setCsvKey(e.target.value);\n                    }}\n                    inputProps={{\n                      name: \"csv\",\n                      id: \"csv-keys\",\n                    }}\n                  >\n                    {csvKeys.map((key: string) => (\n                      <MenuItem value={key}>{key}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n                <ArrowIcon />\n                <FormControl className={classes.formControl}>\n                  <InputLabel htmlFor=\"column-keys\">column Fields</InputLabel>\n                  <Select\n                    value={columnKey}\n                    onChange={(e: any, v: any) => {\n                      setColumnKey(e.target.value);\n                    }}\n                    inputProps={{\n                      name: \"column\",\n                      id: \"column-keys\",\n                    }}\n                  >\n                    {columns.map((column: any) => (\n                      <MenuItem value={column.key}>{column.name}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n                <IconButton\n                  onClick={() => {\n                    if (csvKey && columnKey) {\n                      setKeyPairs([...keyPairs, { csvKey, columnKey }]);\n                      setColumnKey(null);\n                      setCsvKey(null);\n                    }\n                  }}\n                >\n                  <AddIcon />\n                </IconButton>\n              </Grid>\n            </Grid>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={handleImport}\n            disabled={keyPairs.length === 0}\n            color=\"primary\"\n          >\n            import\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, { useState, useCallback, useContext } from \"react\";\nimport _camelCase from \"lodash/camelCase\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Dialog from \"@material-ui/core/Dialog\";\n\nimport Select from \"@material-ui/core/Select\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Input from \"@material-ui/core/Input\";\n\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Chip from \"@material-ui/core/Chip\";\nimport CloudIcon from \"@material-ui/icons/CloudDownload\";\nimport { exportTable } from \"../firebase/callables\";\nimport { saveAs } from \"file-saver\";\nimport useTableConfig from \"../hooks/useFiretable/useTableConfig\";\nimport { SnackContext } from \"../contexts/snackContext\";\nimport { FireTableFilter } from \"../hooks/useFiretable\";\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      width: 400,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n    keyPair: {\n      flexGrow: 2,\n      display: \"flex\",\n      justifyItems: \"space-between\",\n    },\n    cloudIcon: {\n      fontSize: 64,\n    },\n    uploadContainer: {\n      margin: \"auto\",\n    },\n    chips: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      width: 400,\n    },\n    chip: {},\n  })\n);\ninterface Props {\n  columns: any;\n  collection: string;\n  filters: FireTableFilter[];\n}\n\nexport default function ExportCSV(props: Props) {\n  const { columns, collection, filters } = props;\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [csvColumns, setCSVColumns] = useState<any[]>([]);\n  const snackContext = useContext(SnackContext);\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setCSVColumns(event.target.value as any[]);\n  };\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n    setCSVColumns([]);\n  }\n  async function handleExport(columns?: any[]) {\n    handleClose();\n    snackContext.open({\n      message: \"preparing file, download will start shortly\",\n      duration: 5000,\n    });\n    const data = await exportTable({\n      collectionPath: collection,\n      allFields: !Boolean(columns),\n      filters,\n      columns: columns ? columns : [],\n    });\n    var blob = new Blob([data.data], {\n      type: \"text/csv;charset=utf-8\",\n    });\n    saveAs(blob, `${collection}.csv`);\n  }\n\n  return (\n    <div>\n      <Button\n        color=\"secondary\"\n        onClick={handleClickOpen}\n        endIcon={<CloudIcon />}\n      >\n        Export CSV\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Export table into CSV</DialogTitle>\n        <DialogContent>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"column-chip-label\">Exportable columns</InputLabel>\n            <Select\n              id=\"column-chip\"\n              multiple\n              value={csvColumns}\n              onChange={handleChange}\n              input={<Input id=\"select-multiple-chip\" />}\n              renderValue={selected => (\n                <div className={classes.chips}>\n                  {(selected as any[]).map(value => (\n                    <Chip\n                      key={value.key}\n                      label={value.name}\n                      className={classes.chip}\n                    />\n                  ))}\n                </div>\n              )}\n              MenuProps={MenuProps}\n            >\n              {columns.map((column: any) => (\n                <MenuItem key={column.key} value={column}>\n                  {column.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <Button\n            onClick={() => {\n              setCSVColumns(columns);\n            }}\n          >\n            Export All Columns\n          </Button>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              handleExport();\n            }}\n            color=\"secondary\"\n          >\n            Export All Fields\n          </Button>\n          <Button\n            onClick={() => {\n              handleExport(csvColumns);\n            }}\n            disabled={csvColumns.length === 0}\n            color=\"primary\"\n          >\n            Export\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport _unionWith from \"lodash/unionWith\";\n\nimport {\n  createStyles,\n  makeStyles,\n  TextField,\n  Chip,\n  Grid,\n  Button,\n  Typography,\n  IconButton,\n  InputAdornment,\n  Portal,\n} from \"@material-ui/core\";\nimport { FilledTextFieldProps } from \"@material-ui/core/TextField\";\n\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport SelectedIcon from \"@material-ui/icons/Check\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\ninterface StylesProps {\n  searchable: boolean;\n  freeText: boolean;\n  multiple: boolean;\n  width?: number;\n}\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    root: { minWidth: 200 },\n    selectRoot: { paddingRight: theme.spacing(4) },\n\n    paper: { overflow: \"hidden\", maxHeight: \"calc(100% - 48px)\" },\n    menuChild: {\n      padding: `0 ${theme.spacing(2)}px`,\n      width: ({ width }: StylesProps) => width || 480,\n      maxWidth: `calc(100vw - ${theme.spacing(4)}px)`,\n    },\n    grid: { outline: 0 },\n\n    noMargins: { margin: 0 },\n\n    searchRow: { marginTop: theme.spacing(2) },\n\n    chipListRow: {\n      background: `${theme.palette.background.paper} no-repeat`,\n      backgroundImage:\n        \"linear-gradient(to bottom, rgba(255,255,255,1), rgba(255,255,255,0)), linear-gradient(to top, rgba(255,255,255,1), rgba(255,255,255,0))\",\n      backgroundPosition: `-12px 0, -24px 100%`,\n      backgroundSize: `calc(100% + 12px + 12px) 16px`,\n\n      position: \"relative\",\n\n      \"&::before, &::after\": {\n        content: '\"\"',\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        right: 0,\n        zIndex: 9,\n\n        display: \"block\",\n        height: 16,\n\n        background: `linear-gradient(to bottom, #fff, rgba(255, 255, 255, 0))`,\n      },\n\n      \"&::after\": {\n        top: \"auto\",\n        bottom: 0,\n        background: `linear-gradient(to top, #fff, rgba(255, 255, 255, 0))`,\n      },\n    },\n    chipList: ({ searchable, freeText, multiple }: StylesProps) => {\n      let maxHeightDeductions = 0;\n      if (searchable) maxHeightDeductions -= 64;\n      if (multiple) maxHeightDeductions -= 48;\n      if (freeText) maxHeightDeductions -= 48;\n      if (freeText && !multiple) maxHeightDeductions -= theme.spacing(2);\n\n      return {\n        margin: `0px -${theme.spacing(2)}px`,\n        padding: `12px ${theme.spacing(2) - theme.spacing(0.5)}px`,\n        overflowY: \"auto\" as \"auto\",\n        maxHeight: `calc(100vh - 48px - ${-maxHeightDeductions}px)`,\n      };\n    },\n    chip: {\n      margin: theme.spacing(0.5),\n      // Allow multi-line chip\n      maxWidth: `calc(100% - ${theme.spacing(1)}px)`,\n      minHeight: 32,\n      height: \"auto\",\n    },\n    selectedChip: { backgroundColor: theme.palette.divider },\n    chipLabel: {\n      maxWidth: \"100%\",\n      padding: theme.spacing(0.75, 1.5),\n      whiteSpace: \"normal\",\n    },\n\n    footerRow: { marginBottom: theme.spacing(2) },\n    addCustomButton: { marginLeft: -theme.spacing(1) },\n    selectedRow: {\n      \"$chipListRow + &\": { marginTop: -theme.spacing(1) },\n      \"$footerRow + &\": { marginTop: -theme.spacing(2) },\n\n      marginBottom: 0,\n      \"& > div\": { height: 48 },\n    },\n    selectAllButton: { marginRight: -theme.spacing(1) },\n    selectedNum: { fontFeatureSettings: '\"tnum\"' },\n\n    measureChip: {\n      visibility: \"hidden\",\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n    },\n  })\n);\n\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      display: \"flex\",\n    },\n  },\n};\n\ntype OptionType = { label: string; value: string; data?: any };\n\nexport interface IMultipleSelectProps {\n  /** The field name. TODO: Change prop name to `name` for consistency with Formik */\n  field: string;\n  label: string;\n  value: string[];\n  /** The list of options to display. Passing `string[]` will auto-transform */\n  options: OptionType[] | string[];\n  itemRenderer?: (\n    option: OptionType,\n    select: Function,\n    deselect: Function,\n    isSelected: Boolean\n  ) => React.ReactNode;\n  searchable?: boolean;\n  onChange: (name: string, value: string[]) => void;\n\n  /** Optionally allow the user to select all options */\n  selectAll?: boolean;\n  /** Optionally allow the user to add a custom option */\n  freeText?: boolean;\n  /** Optionally set this prop to `false` to only allow one option */\n  multiple?: boolean;\n  /** Optional style overrides for root MUI `TextField` component */\n  className?: string;\n  /** Override any props of the root MUI `TextField` component */\n  TextFieldProps?: Partial<FilledTextFieldProps>;\n}\n\nexport default function MultipleSelect({\n  options: optionsProp,\n  label,\n  field,\n  onChange,\n  value,\n  searchable = false,\n  itemRenderer,\n  freeText = false,\n  multiple = true,\n  selectAll = true,\n  className,\n  TextFieldProps = {},\n}: IMultipleSelectProps) {\n  const [dropdownWidth, setDropdownWidth] = useState(200);\n  const classes = useStyles({\n    searchable,\n    freeText,\n    multiple,\n    width: dropdownWidth,\n  });\n\n  const [filterState, setFilterState] = useState(\"\");\n  const select = option => {\n    if (multiple) onChange(field, [...value, option.value]);\n    else onChange(field, [option.value]);\n  };\n  const deselect = (option: { label: string; value: string }) => {\n    if (multiple)\n      onChange(\n        field,\n        value.filter(v => v !== option.value)\n      );\n    else onChange(field, []);\n  };\n\n  // Transform `option` prop if it’s just strings\n  let options =\n    typeof optionsProp[0] === \"string\"\n      ? (optionsProp as string[]).map(\n          item => ({ label: item, value: item } as OptionType)\n        )\n      : (optionsProp as OptionType[]);\n  // If `freeText` enabled, show the user’s custom fields\n  if (freeText) {\n    // `value` prop is an array of all values. It removes labels\n    const formattedValues = value.map(x => ({ label: x, value: x }));\n    options = _unionWith(\n      options,\n      formattedValues,\n      (a, b) => a.value === b.value\n    );\n  }\n\n  const handleSelectAll = () =>\n    onChange(\n      field,\n      options.map(o => o.value)\n    );\n  const clearSelection = () => onChange(field, []);\n\n  // `freeText`: Handle custom field\n  const [customField, setCustomField] = useState(\"\");\n  const handleAddCustom = () => {\n    select({ value: customField, label: customField });\n    setCustomField(\"\");\n  };\n\n  // Get longest item label\n  const longestLabel = options.reduce(\n    (acc, curr) => (curr.label.length > acc.length ? curr.label : acc),\n    \"\"\n  );\n\n  return (\n    <>\n      <TextField\n        label={label}\n        variant=\"filled\"\n        select\n        value={value}\n        className={clsx(classes.root, className)}\n        {...TextFieldProps}\n        SelectProps={{\n          renderValue: value => {\n            const selected = value as string[];\n            if (selected.length === 1 && typeof selected[0] === \"string\")\n              return selected;\n            return `${selected.length} of ${options.length} selected`;\n          },\n          classes: { root: classes.selectRoot },\n          ...TextFieldProps.SelectProps,\n          // Must have this set to prevent MUI transforming `value`\n          // prop for this component to a comma-separated string\n          multiple: true,\n          MenuProps: {\n            classes: { paper: classes.paper, list: classes.menuChild },\n            MenuListProps: { disablePadding: true },\n            getContentAnchorEl: null,\n            anchorOrigin: { vertical: \"bottom\", horizontal: \"center\" },\n            transformOrigin: { vertical: \"top\", horizontal: \"center\" },\n          },\n        }}\n        ref={el => {\n          if (!el) return;\n          const width = el.getBoundingClientRect().width;\n          if (dropdownWidth < width) setDropdownWidth(width);\n        }}\n      >\n        <Grid container direction=\"column\" className={classes.grid}>\n          {searchable && (\n            <Grid item className={classes.searchRow}>\n              <TextField\n                value={filterState}\n                onChange={e => setFilterState(e.target.value)}\n                fullWidth\n                variant=\"filled\"\n                margin=\"dense\"\n                label=\"Search items\"\n                className={classes.noMargins}\n                InputProps={{\n                  //disableUnderline: true,\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <SearchIcon />\n                    </InputAdornment>\n                  ),\n                }}\n                onClick={e => e.stopPropagation()}\n                onKeyDown={e => e.stopPropagation()}\n              />\n            </Grid>\n          )}\n\n          <Grid item xs className={classes.chipListRow}>\n            <ul className={classes.chipList}>\n              {options\n                .filter(option => {\n                  return (\n                    filterState === \"\" ||\n                    option.label\n                      .toUpperCase()\n                      .includes(filterState.toUpperCase())\n                  );\n                })\n                .map(option => {\n                  const isSelected = value.includes(option.value);\n\n                  let icon = <></>;\n                  if (multiple) {\n                    if (isSelected) icon = <SelectedIcon />;\n                  } else {\n                    if (isSelected) icon = <RadioButtonCheckedIcon />;\n                    else icon = <RadioButtonUncheckedIcon />;\n                  }\n\n                  if (itemRenderer)\n                    return itemRenderer(option, select, deselect, isSelected);\n                  else\n                    return (\n                      <Chip\n                        key={`select-chip-${field}-${option.value}`}\n                        className={clsx(\n                          classes.chip,\n                          isSelected && classes.selectedChip\n                        )}\n                        classes={{ label: classes.chipLabel }}\n                        onClick={e => {\n                          e.stopPropagation();\n                          if (isSelected) deselect(option);\n                          else select(option);\n                        }}\n                        icon={icon}\n                        label={option.label}\n                        variant=\"outlined\"\n                        component=\"li\"\n                        size=\"medium\"\n                      />\n                    );\n                })}\n            </ul>\n          </Grid>\n\n          {freeText && (\n            <Grid item className={classes.footerRow}>\n              <Grid container alignItems=\"center\" spacing={1}>\n                <Grid item>\n                  <IconButton\n                    onClick={handleAddCustom}\n                    className={classes.addCustomButton}\n                  >\n                    <AddIcon />\n                  </IconButton>\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    fullWidth\n                    variant=\"filled\"\n                    label=\"Add new item\"\n                    margin=\"dense\"\n                    className={classes.noMargins}\n                    value={customField}\n                    onChange={e => setCustomField(e.target.value)}\n                    onKeyPress={e => {\n                      if (e.key === \"Enter\") handleAddCustom();\n                    }}\n                    onKeyDown={e => e.stopPropagation()}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          )}\n\n          {multiple && (\n            <Grid item className={clsx(classes.footerRow, classes.selectedRow)}>\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"space-between\"\n                alignItems=\"center\"\n              >\n                <Typography\n                  variant=\"button\"\n                  color=\"textSecondary\"\n                  className={classes.selectedNum}\n                >\n                  {value.length} of {options.length}\n                </Typography>\n                <Button\n                  disabled={selectAll === false && value.length === 0}\n                  onClick={\n                    value.length === options.length || !selectAll\n                      ? clearSelection\n                      : handleSelectAll\n                  }\n                  color=\"primary\"\n                  className={classes.selectAllButton}\n                >\n                  {value.length === options.length || !selectAll\n                    ? \"Clear Selection\"\n                    : \"Select All\"}\n                </Button>\n              </Grid>\n            </Grid>\n          )}\n        </Grid>\n      </TextField>\n\n      <Portal>\n        <Chip\n          className={clsx(classes.chip, classes.measureChip)}\n          classes={{ label: classes.chipLabel }}\n          icon={<SelectedIcon />}\n          label={longestLabel}\n          variant=\"outlined\"\n          role=\"presentation\"\n          ref={el => {\n            if (!el) return;\n            const width = el.getBoundingClientRect().width;\n            if (dropdownWidth < width) setDropdownWidth(width + 32);\n          }}\n        />\n      </Portal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport _find from \"lodash/find\";\n\nimport {\n  makeStyles,\n  createStyles,\n  Popover,\n  Button,\n  Typography,\n  IconButton,\n  FormControl,\n  Grid,\n  Select,\n  MenuItem,\n  TextField,\n} from \"@material-ui/core\";\nimport FilterIcon from \"@material-ui/icons/FilterList\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nimport MultiSelect from \"../../MultiSelect\";\n\nimport { FieldType } from \"../../Fields\";\nimport { FireTableFilter } from \"../../../hooks/useFiretable\";\n\nconst OPERATORS = [\n  {\n    value: \"==\",\n    label: \"Equals\",\n    compatibleTypes: [\n      FieldType.PhoneNumber,\n      FieldType.color,\n      FieldType.date,\n      FieldType.dateTime,\n      FieldType.simpleText,\n      FieldType.singleSelect,\n      FieldType.url,\n      FieldType.email,\n    ],\n  },\n  {\n    value: \"in\",\n    label: \"matches any of\",\n    compatibleTypes: [FieldType.singleSelect],\n  },\n  {\n    value: \"array-contains\",\n    label: \"Has\",\n    compatibleTypes: [FieldType.multiSelect],\n  },\n  {\n    value: \"array-contains-any\",\n    label: \"Has any\",\n    compatibleTypes: [FieldType.multiSelect],\n  },\n  { value: \"<\", label: \"<\", compatibleTypes: [FieldType.number] },\n  { value: \"<=\", label: \"<=\", compatibleTypes: [FieldType.number] },\n  { value: \">=\", label: \">=\", compatibleTypes: [FieldType.number] },\n  { value: \">\", label: \">\", compatibleTypes: [FieldType.number] },\n  {\n    value: \"<\",\n    label: \"before\",\n    compatibleTypes: [FieldType.date, FieldType.dateTime],\n  },\n  {\n    value: \">=\",\n    label: \"after\",\n    compatibleTypes: [FieldType.date, FieldType.dateTime],\n  },\n];\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    paper: { width: 640 },\n\n    closeButton: {\n      position: \"absolute\",\n      top: theme.spacing(0.5),\n      right: theme.spacing(0.5),\n    },\n\n    content: { padding: theme.spacing(4) },\n\n    topRow: { marginBottom: theme.spacing(3.5) },\n    bottomButtons: { marginTop: theme.spacing(4.5) },\n  })\n);\n\nconst Filters = ({ columns, setFilters }: any) => {\n  //const filters = [{}, {}];\n\n  const filterColumns = columns\n    .filter(c => c.type !== FieldType.file && c.type !== FieldType.image)\n    .map(c => ({\n      key: c.key,\n      label: c.name,\n      type: c.type,\n      options: c.options,\n    }));\n  filterColumns.pop(); // remove the new column\n\n  const classes = useStyles();\n  const filters = [];\n  const combineType = \"all\";\n  const [selectedColumn, setSelectedColumn] = useState<any>();\n\n  const [query, setQuery] = useState<FireTableFilter>({\n    key: \"\",\n    operator: \"\",\n    value: \"\",\n  });\n\n  useEffect(() => {\n    if (selectedColumn) {\n      let updatedQuery = { key: selectedColumn.key, operator: \"\", value: \"\" };\n      if (\n        [\n          FieldType.PhoneNumber,\n          FieldType.simpleText,\n          FieldType.url,\n          FieldType.email,\n        ].includes(selectedColumn.type)\n      ) {\n        updatedQuery = { ...updatedQuery, operator: \"==\" };\n      }\n      setQuery(updatedQuery);\n    }\n  }, [selectedColumn]);\n\n  const operators = selectedColumn\n    ? OPERATORS.filter(operator =>\n        operator.compatibleTypes.includes(selectedColumn.type)\n      )\n    : [];\n\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const handleClose = () => setAnchorEl(null);\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(anchorEl ? null : event.currentTarget);\n  };\n\n  const handleChangeColumn = e => {\n    const column = _find(filterColumns, c => c.key === e.target.value);\n    setSelectedColumn(column);\n  };\n  const open = Boolean(anchorEl);\n\n  const id = open ? \"simple-popper\" : undefined;\n\n  const renderInputField = (selectedColumn, operator) => {\n    console.log(\"selectedColumn.fieldType\", selectedColumn.type);\n    switch (selectedColumn.type) {\n      case FieldType.email:\n      case FieldType.PhoneNumber:\n      case FieldType.simpleText:\n      case FieldType.longText:\n        return (\n          <TextField\n            onChange={e => {\n              const value = e.target.value;\n              if (value) setQuery(query => ({ ...query, value: value }));\n            }}\n            variant=\"filled\"\n            hiddenLabel\n            placeholder=\"Text value\"\n          />\n        );\n\n      case FieldType.singleSelect:\n        const val = query?.value\n          ? Array.isArray(query.value)\n            ? query.value\n            : [query.value as string]\n          : [];\n\n        return (\n          <MultiSelect\n            onChange={(fieldName, value) => {\n              if (operator === \"==\")\n                setQuery(query => ({ ...query, value: value[0] }));\n              else setQuery(query => ({ ...query, value }));\n            }}\n            options={selectedColumn.options}\n            label=\"\"\n            field=\"\"\n            value={val}\n            multiple={operator === \"in\"}\n            TextFieldProps={{ hiddenLabel: true }}\n          />\n        );\n\n      default:\n        return <>Not available</>;\n        // return <TextField variant=\"filled\" fullWidth disabled />;\n        break;\n    }\n  };\n  return (\n    <>\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={handleClick}\n        startIcon={<FilterIcon />}\n      >\n        {filters.length !== 0 && filters.length}\n        {` Filters`}\n      </Button>\n\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        classes={{ paper: classes.paper }}\n        onClose={handleClose}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n        transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      >\n        <IconButton className={classes.closeButton} onClick={handleClose}>\n          <CloseIcon />\n        </IconButton>\n\n        <div className={classes.content}>\n          {/* <Grid\n            container\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.topRow}\n          >\n            <Grid item>\n              <Typography component=\"span\">Results match</Typography>\n            </Grid>\n\n            <Grid item>\n              <TextField\n                select\n                variant=\"filled\"\n                id=\"demo-simple-select-filled\"\n                value={combineType}\n                hiddenLabel\n                // disabled\n                // onChange={handleChange}\n              >\n                <MenuItem value=\"all\">all</MenuItem>\n                <MenuItem value=\"any\">any</MenuItem>\n              </TextField>\n            </Grid>\n\n            <Grid item>\n              <Typography component=\"span\">of the filter criteria.</Typography>\n            </Grid>\n          </Grid> */}\n\n          <Grid container spacing={2}>\n            <Grid item xs={4}>\n              <Typography variant=\"overline\">Column</Typography>\n            </Grid>\n            <Grid item xs={4}>\n              <Typography variant=\"overline\">Condition</Typography>\n            </Grid>\n            <Grid item xs={4}>\n              <Typography variant=\"overline\">Value</Typography>\n            </Grid>\n          </Grid>\n\n          <Grid container spacing={2}>\n            <Grid item xs={4}>\n              <TextField\n                select\n                variant=\"filled\"\n                hiddenLabel\n                fullWidth\n                value={selectedColumn?.key ?? \"\"}\n                onChange={handleChangeColumn}\n                SelectProps={{ displayEmpty: true }}\n              >\n                <MenuItem disabled value=\"\" style={{ display: \"none\" }}>\n                  Select Column\n                </MenuItem>\n                {filterColumns.map(c => (\n                  <MenuItem value={c.key}>{c.label}</MenuItem>\n                ))}\n              </TextField>\n            </Grid>\n\n            <Grid item xs={4}>\n              <TextField\n                select\n                variant=\"filled\"\n                hiddenLabel\n                fullWidth\n                value={query.operator}\n                disabled={!query.key || operators?.length === 0}\n                onChange={e => {\n                  setQuery(query => ({\n                    ...query,\n                    operator: e.target.value as string,\n                  }));\n                }}\n                SelectProps={{ displayEmpty: true }}\n              >\n                <MenuItem disabled value=\"\" style={{ display: \"none\" }}>\n                  Select Condition\n                </MenuItem>\n                {operators.map(operator => (\n                  <MenuItem value={operator.value}>{operator.label}</MenuItem>\n                ))}\n              </TextField>\n            </Grid>\n\n            <Grid item xs={4}>\n              {query.operator &&\n                renderInputField(selectedColumn, query.operator)}\n            </Grid>\n          </Grid>\n\n          <Grid\n            container\n            className={classes.bottomButtons}\n            justify=\"space-between\"\n          >\n            {/* <Button color=\"primary\">+ ADD FILTER</Button> */}\n            <Button\n              disabled={query.key == \"\"}\n              color=\"secondary\"\n              onClick={() => {\n                setFilters([]);\n                setQuery({\n                  key: \"\",\n                  operator: \"\",\n                  value: \"\",\n                });\n                setSelectedColumn(null);\n                //handleClose();\n              }}\n            >\n              Clear\n            </Button>\n            <Button\n              disabled={query.value == \"\"}\n              color=\"primary\"\n              onClick={() => {\n                setFilters([query]);\n                handleClose();\n              }}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </div>\n      </Popover>\n    </>\n  );\n};\n\nexport default Filters;\n","import React from \"react\";\n\nimport {\n  makeStyles,\n  createStyles,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  Button,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/AddCircle\";\n\nimport ImportCSV from \"../ImportCSV\";\nimport ExportCSV from \"../ExportCSV\";\n\nimport { FireTableFilter } from \"../../hooks/useFiretable\";\n\nimport Filters from \"./Filters\";\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      margin: 0,\n      padding: theme.spacing(0, 1),\n      minHeight: 56,\n    },\n    collectionName: { textTransform: \"uppercase\" },\n    formControl: { minWidth: 120 },\n  })\n);\n\ninterface Props {\n  collection: string;\n  rowHeight: number;\n  updateConfig: Function;\n  tableActions: any;\n  addRow: Function;\n  columns: any;\n  filters: FireTableFilter[];\n}\nconst TableHeader = ({\n  collection,\n  rowHeight,\n  updateConfig,\n  columns,\n  addRow,\n  filters,\n  tableActions,\n}: Props) => {\n  const classes = useStyles();\n\n  return (\n    <Grid container alignItems=\"center\" spacing={2} className={classes.root}>\n      <Grid item>\n        <Typography variant=\"h6\" className={classes.collectionName}>\n          {collection}\n        </Typography>\n      </Grid>\n\n      <Grid item xs>\n        <FormControl variant=\"outlined\" className={classes.formControl}>\n          <InputLabel htmlFor=\"outlined-age-simple\">Row Height</InputLabel>\n          <Select\n            value={rowHeight ? rowHeight : 35}\n            onChange={(event: any, child: any) => {\n              updateConfig(\"rowHeight\", event.target.value);\n            }}\n            labelWidth={90}\n            inputProps={{\n              name: \"rowHeight\",\n              id: \"outlined-rowHeight-simple\",\n            }}\n            margin=\"dense\"\n          >\n            <MenuItem value={35}>Tall</MenuItem>\n            <MenuItem value={60}>Grande</MenuItem>\n            <MenuItem value={100}>Venti</MenuItem>\n            <MenuItem value={150}>Trenta</MenuItem>\n          </Select>\n        </FormControl>\n      </Grid>\n      <Filters\n        columns={columns}\n        tableFilters={filters}\n        setFilters={tableActions.table.filter}\n      />\n      <Grid item>\n        <Grid container spacing={1}>\n          <Grid item>\n            <ExportCSV\n              columns={columns.map((column: any) => {\n                const { key, name, config, type } = column;\n                return { key, name, config, type };\n              })}\n              collection={collection}\n              filters={filters}\n            />\n          </Grid>\n\n          <Grid item>\n            <ImportCSV columns={columns} addRow={addRow} />\n          </Grid>\n\n          <Grid item>\n            <Button\n              color=\"secondary\"\n              onClick={() => addRow()}\n              endIcon={<AddIcon />}\n            >\n              Add Row\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\nexport default TableHeader;\n"],"sourceRoot":""}