{"version":3,"sources":["../node_modules/hotkeys-js/dist/hotkeys.esm.js","hooks/useHotkeys.ts","components/Table/HotKeys.tsx"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","isff","navigator","userAgent","toLowerCase","indexOf","addEvent","object","event","method","addEventListener","attachEvent","concat","window","getMods","modifier","key","mods","slice","length","i","getKeys","keys","replace","split","index","lastIndexOf","splice","_keyMap","backspace","tab","clear","enter","esc","escape","space","left","up","right","down","del","ins","insert","home","end","pageup","pagedown","capslock","'","_modifier","shift","alt","option","ctrl","control","cmd","command","modifierMap","16","18","17","91","shiftKey","ctrlKey","altKey","metaKey","_mods","_handlers","k","_downKeys","_scope","elementHasBindEvent","code","x","toUpperCase","charCodeAt","setScope","scope","getScope","eachUnbind","_ref","_ref$splitKey","splitKey","forEach","originKey","unbindKeys","len","lastKey","keyCode","map","record","a1","a2","arr1","arr2","isIndex","compareArray","eventHandler","handler","modifiersMatch","y","Object","hasOwnProperty","call","shortcut","preventDefault","returnValue","stopPropagation","cancelBubble","dispatch","asterisk","which","charCode","hotkeys","filter","this","push","keyName","keyNum","e","type","keydown","keyup","_i","keyShortcut","_downKeysCurrent","a","sort","join","element","document","undefined","toString","isElementBind","clearModifier","_api","deleteScope","newScope","handlers","getPressedKeyCodes","isPressed","target","srcElement","tagName","flag","isContentEditable","readOnly","unbind","keysInfo","Array","isArray","info","_len","arguments","args","_key","_hotkeys","noConflict","deep","useHotkeys","callback","deps","memoisedCallback","useCallback","useEffect","Hotkeys","props","selectedCell","handleCopy","handlePaste","handleCut","stringFields","FieldType","email","simpleText","PhoneNumber","singleSelect","longText","url","numberFields","number","rating","async","row","column","clipboard","readText","newValue","includes","onSubmit","numberValue","parseInt","supportedFields","writeText"],"mappings":"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","file":"static/js/33.919fd1e6.chunk.js","sourcesContent":["/*!\n * hotkeys-js v3.7.3\n * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies.\n * \n * Copyright (c) 2019 kenny wong <wowohoo@qq.com>\n * http://jaywcjlove.github.io/hotkeys\n * \n * Licensed under the MIT license.\n */\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false; // 绑定事件\n\nfunction addEvent(object, event, method) {\n  if (object.addEventListener) {\n    object.addEventListener(event, method, false);\n  } else if (object.attachEvent) {\n    object.attachEvent(\"on\".concat(event), function () {\n      method(window.event);\n    });\n  }\n} // 修饰键转换成对应的键码\n\n\nfunction getMods(modifier, key) {\n  var mods = key.slice(0, key.length - 1);\n\n  for (var i = 0; i < mods.length; i++) {\n    mods[i] = modifier[mods[i].toLowerCase()];\n  }\n\n  return mods;\n} // 处理传的key字符串转换成数组\n\n\nfunction getKeys(key) {\n  if (typeof key !== 'string') key = '';\n  key = key.replace(/\\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等\n\n  var keys = key.split(','); // 同时设置多个快捷键，以','分割\n\n  var index = keys.lastIndexOf(''); // 快捷键可能包含','，需特殊处理\n\n  for (; index >= 0;) {\n    keys[index - 1] += ',';\n    keys.splice(index, 1);\n    index = keys.lastIndexOf('');\n  }\n\n  return keys;\n} // 比较修饰键的数组\n\n\nfunction compareArray(a1, a2) {\n  var arr1 = a1.length >= a2.length ? a1 : a2;\n  var arr2 = a1.length >= a2.length ? a2 : a1;\n  var isIndex = true;\n\n  for (var i = 0; i < arr1.length; i++) {\n    if (arr2.indexOf(arr1[i]) === -1) isIndex = false;\n  }\n\n  return isIndex;\n}\n\nvar _keyMap = {\n  backspace: 8,\n  tab: 9,\n  clear: 12,\n  enter: 13,\n  \"return\": 13,\n  esc: 27,\n  escape: 27,\n  space: 32,\n  left: 37,\n  up: 38,\n  right: 39,\n  down: 40,\n  del: 46,\n  \"delete\": 46,\n  ins: 45,\n  insert: 45,\n  home: 36,\n  end: 35,\n  pageup: 33,\n  pagedown: 34,\n  capslock: 20,\n  '⇪': 20,\n  ',': 188,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '-': isff ? 173 : 189,\n  '=': isff ? 61 : 187,\n  ';': isff ? 59 : 186,\n  '\\'': 222,\n  '[': 219,\n  ']': 221,\n  '\\\\': 220\n}; // Modifier Keys\n\nvar _modifier = {\n  // shiftKey\n  '⇧': 16,\n  shift: 16,\n  // altKey\n  '⌥': 18,\n  alt: 18,\n  option: 18,\n  // ctrlKey\n  '⌃': 17,\n  ctrl: 17,\n  control: 17,\n  // metaKey\n  '⌘': 91,\n  cmd: 91,\n  command: 91\n};\nvar modifierMap = {\n  16: 'shiftKey',\n  18: 'altKey',\n  17: 'ctrlKey',\n  91: 'metaKey',\n  shiftKey: 16,\n  ctrlKey: 17,\n  altKey: 18,\n  metaKey: 91\n};\nvar _mods = {\n  16: false,\n  18: false,\n  17: false,\n  91: false\n};\nvar _handlers = {}; // F1~F12 special key\n\nfor (var k = 1; k < 20; k++) {\n  _keyMap[\"f\".concat(k)] = 111 + k;\n}\n\nvar _downKeys = []; // 记录摁下的绑定键\n\nvar _scope = 'all'; // 默认热键范围\n\nvar elementHasBindEvent = []; // 已绑定事件的节点记录\n// 返回键码\n\nvar code = function code(x) {\n  return _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);\n}; // 设置获取当前范围（默认为'所有'）\n\n\nfunction setScope(scope) {\n  _scope = scope || 'all';\n} // 获取当前范围\n\n\nfunction getScope() {\n  return _scope || 'all';\n} // 获取摁下绑定键的键值\n\n\nfunction getPressedKeyCodes() {\n  return _downKeys.slice(0);\n} // 表单控件控件判断 返回 Boolean\n// hotkey is effective only when filter return true\n\n\nfunction filter(event) {\n  var target = event.target || event.srcElement;\n  var tagName = target.tagName;\n  var flag = true; // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>\n\n  if (target.isContentEditable || (tagName === 'INPUT' || tagName === 'TEXTAREA') && !target.readOnly) {\n    flag = false;\n  }\n\n  return flag;\n} // 判断摁下的键是否为某个键，返回true或者false\n\n\nfunction isPressed(keyCode) {\n  if (typeof keyCode === 'string') {\n    keyCode = code(keyCode); // 转换成键码\n  }\n\n  return _downKeys.indexOf(keyCode) !== -1;\n} // 循环删除handlers中的所有 scope(范围)\n\n\nfunction deleteScope(scope, newScope) {\n  var handlers;\n  var i; // 没有指定scope，获取scope\n\n  if (!scope) scope = getScope();\n\n  for (var key in _handlers) {\n    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {\n      handlers = _handlers[key];\n\n      for (i = 0; i < handlers.length;) {\n        if (handlers[i].scope === scope) handlers.splice(i, 1);else i++;\n      }\n    }\n  } // 如果scope被删除，将scope重置为all\n\n\n  if (getScope() === scope) setScope(newScope || 'all');\n} // 清除修饰键\n\n\nfunction clearModifier(event) {\n  var key = event.keyCode || event.which || event.charCode;\n\n  var i = _downKeys.indexOf(key); // 从列表中清除按压过的键\n\n\n  if (i >= 0) {\n    _downKeys.splice(i, 1);\n  } // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题\n\n\n  if (event.key && event.key.toLowerCase() === 'meta') {\n    _downKeys.splice(0, _downKeys.length);\n  } // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除\n\n\n  if (key === 93 || key === 224) key = 91;\n\n  if (key in _mods) {\n    _mods[key] = false; // 将修饰键重置为false\n\n    for (var k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = false;\n    }\n  }\n}\n\nfunction unbind(keysInfo) {\n  // unbind(), unbind all keys\n  if (!keysInfo) {\n    Object.keys(_handlers).forEach(function (key) {\n      return delete _handlers[key];\n    });\n  } else if (Array.isArray(keysInfo)) {\n    // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])\n    keysInfo.forEach(function (info) {\n      if (info.key) eachUnbind(info);\n    });\n  } else if (_typeof(keysInfo) === 'object') {\n    // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})\n    if (keysInfo.key) eachUnbind(keysInfo);\n  } else if (typeof keysInfo === 'string') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    // support old method\n    // eslint-disable-line\n    var scope = args[0],\n        method = args[1];\n\n    if (typeof scope === 'function') {\n      method = scope;\n      scope = '';\n    }\n\n    eachUnbind({\n      key: keysInfo,\n      scope: scope,\n      method: method,\n      splitKey: '+'\n    });\n  }\n} // 解除绑定某个范围的快捷键\n\n\nvar eachUnbind = function eachUnbind(_ref) {\n  var key = _ref.key,\n      scope = _ref.scope,\n      method = _ref.method,\n      _ref$splitKey = _ref.splitKey,\n      splitKey = _ref$splitKey === void 0 ? '+' : _ref$splitKey;\n  var multipleKeys = getKeys(key);\n  multipleKeys.forEach(function (originKey) {\n    var unbindKeys = originKey.split(splitKey);\n    var len = unbindKeys.length;\n    var lastKey = unbindKeys[len - 1];\n    var keyCode = lastKey === '*' ? '*' : code(lastKey);\n    if (!_handlers[keyCode]) return; // 判断是否传入范围，没有就获取范围\n\n    if (!scope) scope = getScope();\n    var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];\n    _handlers[keyCode] = _handlers[keyCode].map(function (record) {\n      // 通过函数判断，是否解除绑定，函数相等直接返回\n      var isMatchingMethod = method ? record.method === method : true;\n\n      if (isMatchingMethod && record.scope === scope && compareArray(record.mods, mods)) {\n        return {};\n      }\n\n      return record;\n    });\n  });\n}; // 对监听对应快捷键的回调函数进行处理\n\n\nfunction eventHandler(event, handler, scope) {\n  var modifiersMatch; // 看它是否在当前范围\n\n  if (handler.scope === scope || handler.scope === 'all') {\n    // 检查是否匹配修饰符（如果有返回true）\n    modifiersMatch = handler.mods.length > 0;\n\n    for (var y in _mods) {\n      if (Object.prototype.hasOwnProperty.call(_mods, y)) {\n        if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {\n          modifiersMatch = false;\n        }\n      }\n    } // 调用处理程序，如果是修饰键不做处理\n\n\n    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {\n      if (handler.method(event, handler) === false) {\n        if (event.preventDefault) event.preventDefault();else event.returnValue = false;\n        if (event.stopPropagation) event.stopPropagation();\n        if (event.cancelBubble) event.cancelBubble = true;\n      }\n    }\n  }\n} // 处理keydown事件\n\n\nfunction dispatch(event) {\n  var asterisk = _handlers['*'];\n  var key = event.keyCode || event.which || event.charCode; // 表单控件过滤 默认表单控件不触发快捷键\n\n  if (!hotkeys.filter.call(this, event)) return; // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致\n  // Webkit左右 command 键值不一样\n\n  if (key === 93 || key === 224) key = 91;\n  /**\n   * Collect bound keys\n   * If an Input Method Editor is processing key input and the event is keydown, return 229.\n   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229\n   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n   */\n\n  if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);\n  /**\n   * Jest test cases are required.\n   * ===============================\n   */\n\n  ['ctrlKey', 'altKey', 'shiftKey', 'metaKey'].forEach(function (keyName) {\n    var keyNum = modifierMap[keyName];\n\n    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {\n      _downKeys.push(keyNum);\n    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {\n      _downKeys.splice(_downKeys.indexOf(keyNum), 1);\n    }\n  });\n  /**\n   * -------------------------------\n   */\n\n  if (key in _mods) {\n    _mods[key] = true; // 将特殊字符的key注册到 hotkeys 上\n\n    for (var k in _modifier) {\n      if (_modifier[k] === key) hotkeys[k] = true;\n    }\n\n    if (!asterisk) return;\n  } // 将 modifierMap 里面的修饰键绑定到 event 中\n\n\n  for (var e in _mods) {\n    if (Object.prototype.hasOwnProperty.call(_mods, e)) {\n      _mods[e] = event[modifierMap[e]];\n    }\n  } // 获取范围 默认为 `all`\n\n\n  var scope = getScope(); // 对任何快捷键都需要做的处理\n\n  if (asterisk) {\n    for (var i = 0; i < asterisk.length; i++) {\n      if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) {\n        eventHandler(event, asterisk[i], scope);\n      }\n    }\n  } // key 不在 _handlers 中返回\n\n\n  if (!(key in _handlers)) return;\n\n  for (var _i = 0; _i < _handlers[key].length; _i++) {\n    if (event.type === 'keydown' && _handlers[key][_i].keydown || event.type === 'keyup' && _handlers[key][_i].keyup) {\n      if (_handlers[key][_i].key) {\n        var record = _handlers[key][_i];\n        var splitKey = record.splitKey;\n        var keyShortcut = record.key.split(splitKey);\n        var _downKeysCurrent = []; // 记录当前按键键值\n\n        for (var a = 0; a < keyShortcut.length; a++) {\n          _downKeysCurrent.push(code(keyShortcut[a]));\n        }\n\n        if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) {\n          // 找到处理内容\n          eventHandler(event, record, scope);\n        }\n      }\n    }\n  }\n} // 判断 element 是否已经绑定事件\n\n\nfunction isElementBind(element) {\n  return elementHasBindEvent.indexOf(element) > -1;\n}\n\nfunction hotkeys(key, option, method) {\n  _downKeys = [];\n  var keys = getKeys(key); // 需要处理的快捷键列表\n\n  var mods = [];\n  var scope = 'all'; // scope默认为all，所有范围都有效\n\n  var element = document; // 快捷键事件绑定节点\n\n  var i = 0;\n  var keyup = false;\n  var keydown = true;\n  var splitKey = '+'; // 对为设定范围的判断\n\n  if (method === undefined && typeof option === 'function') {\n    method = option;\n  }\n\n  if (Object.prototype.toString.call(option) === '[object Object]') {\n    if (option.scope) scope = option.scope; // eslint-disable-line\n\n    if (option.element) element = option.element; // eslint-disable-line\n\n    if (option.keyup) keyup = option.keyup; // eslint-disable-line\n\n    if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line\n\n    if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line\n  }\n\n  if (typeof option === 'string') scope = option; // 对于每个快捷键进行处理\n\n  for (; i < keys.length; i++) {\n    key = keys[i].split(splitKey); // 按键列表\n\n    mods = []; // 如果是组合快捷键取得组合快捷键\n\n    if (key.length > 1) mods = getMods(_modifier, key); // 将非修饰键转化为键码\n\n    key = key[key.length - 1];\n    key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键\n    // 判断key是否在_handlers中，不在就赋一个空数组\n\n    if (!(key in _handlers)) _handlers[key] = [];\n\n    _handlers[key].push({\n      keyup: keyup,\n      keydown: keydown,\n      scope: scope,\n      mods: mods,\n      shortcut: keys[i],\n      method: method,\n      key: keys[i],\n      splitKey: splitKey\n    });\n  } // 在全局document上设置快捷键\n\n\n  if (typeof element !== 'undefined' && !isElementBind(element) && window) {\n    elementHasBindEvent.push(element);\n    addEvent(element, 'keydown', function (e) {\n      dispatch(e);\n    });\n    addEvent(window, 'focus', function () {\n      _downKeys = [];\n    });\n    addEvent(element, 'keyup', function (e) {\n      dispatch(e);\n      clearModifier(e);\n    });\n  }\n}\n\nvar _api = {\n  setScope: setScope,\n  getScope: getScope,\n  deleteScope: deleteScope,\n  getPressedKeyCodes: getPressedKeyCodes,\n  isPressed: isPressed,\n  filter: filter,\n  unbind: unbind\n};\n\nfor (var a in _api) {\n  if (Object.prototype.hasOwnProperty.call(_api, a)) {\n    hotkeys[a] = _api[a];\n  }\n}\n\nif (typeof window !== 'undefined') {\n  var _hotkeys = window.hotkeys;\n\n  hotkeys.noConflict = function (deep) {\n    if (deep && window.hotkeys === hotkeys) {\n      window.hotkeys = _hotkeys;\n    }\n\n    return hotkeys;\n  };\n\n  window.hotkeys = hotkeys;\n}\n\nexport default hotkeys;\n","import hotkeys, { HotkeysEvent } from \"hotkeys-js\";\nimport { useCallback, useEffect } from \"react\";\n\ntype CallbackFn = (event: KeyboardEvent, handler: HotkeysEvent) => void;\n/**\n * used for listening for keyboard shortcuts\n * @param keys\n * @param callback\n * @param deps\n */\nexport default function useHotkeys(\n  keys: string,\n  callback: CallbackFn,\n  deps: any[] = []\n) {\n  const memoisedCallback = useCallback(callback, deps);\n\n  useEffect(() => {\n    hotkeys(keys, memoisedCallback);\n\n    return () => hotkeys.unbind(keys, memoisedCallback);\n  }, [memoisedCallback]);\n}\n","import React from \"react\";\nimport useHotkeys from \"../../hooks/useHotkeys\";\nimport { onSubmit } from \"./grid-fns\";\nimport { FieldType } from \"../Fields\";\n/**\n * Listens Hot Keys combination keys to trigger keyboard shortcuts\n */\nconst Hotkeys = (props: any) => {\n  const { selectedCell } = props;\n\n  useHotkeys(\n    \"cmd+c\",\n    () => {\n      handleCopy();\n    },\n    [selectedCell]\n  );\n  useHotkeys(\n    \"ctrl+c\",\n    () => {\n      handleCopy();\n    },\n    [selectedCell]\n  );\n  useHotkeys(\n    \"cmd+v\",\n    () => {\n      handlePaste();\n    },\n    [selectedCell]\n  );\n  useHotkeys(\n    \"ctrl+v\",\n    () => {\n      handlePaste();\n    },\n    [selectedCell]\n  );\n  useHotkeys(\n    \"ctrl+x\",\n    () => {\n      handleCut();\n    },\n    [selectedCell]\n  );\n  useHotkeys(\n    \"cmd+x\",\n    () => {\n      handleCut();\n    },\n    [selectedCell]\n  );\n  const stringFields = [\n    FieldType.email,\n    FieldType.simpleText,\n    FieldType.PhoneNumber,\n    FieldType.singleSelect,\n    FieldType.longText,\n    FieldType.url,\n  ];\n  const numberFields = [FieldType.number, FieldType.rating];\n  /**\n   * populate cell from clipboard\n   */\n  const handlePaste = async () => {\n    const { row, column } = selectedCell;\n    const newValue = await navigator.clipboard.readText();\n    if (stringFields.includes(column.type)) onSubmit(column.key, row)(newValue);\n    else if (numberFields.includes(column.type)) {\n      const numberValue = parseInt(newValue);\n      if (`${numberValue}` !== \"NaN\") {\n        onSubmit(column.key, row)(numberValue);\n      }\n    }\n  };\n  const supportedFields = [...stringFields, ...numberFields];\n  /**\n   * copy cell content to clipboard works only on supported fields\n   */\n  const handleCopy = () => {\n    const { row, column } = selectedCell;\n    if (supportedFields.includes(column.type)) {\n      navigator.clipboard.writeText(row[column.key]);\n    }\n  };\n  /**\n   * copy cell content to clipboard and clears cell(only on supported fields)\n   */\n  const handleCut = () => {\n    const { row, column } = selectedCell;\n    if (supportedFields.includes(column.type)) {\n      navigator.clipboard.writeText(row[column.key]);\n      onSubmit(column.key, row)(null);\n    }\n  };\n  return <></>;\n};\nexport default Hotkeys;\n"],"sourceRoot":""}