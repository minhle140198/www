{"version":3,"sources":["components/Fields/Color.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","position","display","flexWrap","alignItems","colorIndicator","width","height","margin","backgroundColor","borderStyle","borderWidth","Color","props","value","onSubmit","useState","hex","setHex","useEffect","anchorEl","setAnchorEl","classes","open","Boolean","id","undefined","className","onClick","event","currentTarget","style","color","rgb","onChange","onChangeComplete","hsl"],"mappings":"8KAaMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,SAAU,WACVC,QAAS,OACTC,SAAU,OACVC,WAAY,UAEdC,eAAgB,CACdC,MAAO,GACPC,OAAQ,GACRC,OAAQ,GACRC,gBAAiB,OACjBC,YAAa,QACbC,YAAa,SAyDJC,UA7CD,SAACC,GAAkB,IACvBC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SADe,EAERC,mBAASF,EAAQA,EAAMG,IAAM,IAFrB,mBAEvBA,EAFuB,KAElBC,EAFkB,KAG9BC,qBAAU,WACJF,IAAQH,EAAMG,KAAKC,EAAOJ,EAAMG,OACnC,CAACH,IAL0B,MAMEE,mBAAgC,MANlC,mBAMvBI,EANuB,KAMbC,EANa,KAOxBC,EAAU1B,IAMV2B,EAAOC,QAAQJ,GACfK,EAAKF,EAAO,4BAAyBG,EAM3C,OACE,oCACE,yBAAKC,UAAWL,EAAQtB,MACtB,yBACE4B,QAfY,SAACC,GACnBR,EAAYQ,EAAMC,gBAeZH,UAAWL,EAAQjB,eACnB0B,MAAO,CAAEtB,gBAAiBQ,KACzB,IACFA,GAEH,kBAAC,IAAD,CAAQQ,GAAIA,EAAIF,KAAMA,EAAMH,SAAUA,GACpC,kBAAC,gBAAD,CACEY,MAAOlB,EAAMmB,IACbC,SAAU,SAAArB,GACRK,EAAOL,EAAMI,MAEfkB,iBAAkB,SAAAtB,GAChBE,EAAS,CAAEE,IAAKJ,EAAMI,IAAKmB,IAAKvB,EAAMuB,IAAKH,IAAKpB,EAAMoB,MACtDZ,EAAY","file":"static/js/27.6ac32415.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  SketchPicker,\n  BlockPicker,\n  CompactPicker,\n  TwitterPicker,\n} from \"react-color\";\nimport Popper from \"@material-ui/core/Popper\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport ExpandIcon from \"@material-ui/icons/AspectRatio\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      position: \"relative\",\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      alignItems: \"center\",\n    },\n    colorIndicator: {\n      width: 20,\n      height: 20,\n      margin: 10,\n      backgroundColor: \"#fff\",\n      borderStyle: \"solid\",\n      borderWidth: 0.5,\n    },\n  })\n);\n// TODO: Create an interface for props\n\ninterface Props {\n  value: { hex: string; rgb: any };\n  row: { id: string };\n  onSubmit: Function;\n  isScrolling: boolean;\n}\nconst Color = (props: Props) => {\n  const { value, onSubmit } = props;\n  const [hex, setHex] = useState(value ? value.hex : \"\");\n  useEffect(() => {\n    if (hex !== value.hex) setHex(value.hex);\n  }, [value]);\n  const [anchorEl, setAnchorEl] = useState<HTMLDivElement | null>(null);\n  const classes = useStyles();\n\n  const handleClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? \"no-transition-popper\" : undefined;\n  const onClickAway = (event: any) => {\n    if (event.target.id !== id && open) {\n      setAnchorEl(null);\n    }\n  };\n  return (\n    <>\n      <div className={classes.root}>\n        <div\n          onClick={handleClick}\n          className={classes.colorIndicator}\n          style={{ backgroundColor: hex }}\n        />{\" \"}\n        {hex}\n      </div>\n      <Popper id={id} open={open} anchorEl={anchorEl}>\n        <CompactPicker\n          color={value.rgb}\n          onChange={props => {\n            setHex(props.hex);\n          }}\n          onChangeComplete={props => {\n            onSubmit({ hex: props.hex, hsl: props.hsl, rgb: props.rgb });\n            setAnchorEl(null);\n          }}\n        />\n      </Popper>\n    </>\n  );\n};\nexport default Color;\n"],"sourceRoot":""}